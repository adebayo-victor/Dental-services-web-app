### A Simple Guide to Using Git and GitHub

This document will walk you through the fundamental steps of using Git to manage your code and sync it with your online repository on GitHub.

---

### Part 1: Initial Setup (Do this only once)

#### Step 1: Install Git
- If you haven't already, download and install Git from the official website: `https://git-scm.com/downloads`
- Follow the installation prompts. The default settings are usually fine.

#### Step 2: Configure Git
- After installing, open your terminal (on Mac/Linux) or Git Bash (on Windows).
- Tell Git your name and email. This will be attached to every change you make.
```bash
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
```

---

### Part 2: Starting a Project

#### Step 3: Initialize a Git Repository
- Navigate to your project folder in the terminal.
- Run this command to tell Git to start tracking changes in this folder.
```bash
git init
```
- This creates a hidden `.git` folder inside your project.

#### Step 4: Add Your Project to GitHub
- Go to `github.com` and create a new, empty repository.
- **Do NOT** check the "Initialize this repository with a README" box.
- Once created, GitHub will show you a few commands. The one you need is:
```bash
git remote add origin <your_repository_url>
```
- Replace `<your_repository_url>` with the URL provided by GitHub (e.g., `https://github.com/your-username/your-project.git`). This connects your local folder to your online repository.

---

### Part 3: The Daily Workflow (The most important part)

This is the cycle you will repeat every time you make a change to your code.

#### Step 5: Check Status
- At any time, you can see which files you have changed or added.
```bash
git status
```
- This command shows you which files Git is aware of and which ones it is currently tracking.

#### Step 6: Stage Your Changes
- After you change a file, you need to tell Git that you want to include it in your next set of changes. This is called "staging."
- To stage all files you've changed:
```bash
git add .
```
- The `.` means "all files in the current directory."

#### Step 7: Commit Your Changes
- A commit is a snapshot of your project at a specific time. It's like saving your work, but with a note.
- The message after `-m` should describe the changes you made.
```bash
git commit -m "Your descriptive commit message here"
```
- A good message might be "Updated code with permanent Render URL" or "Fixed login button styling."

#### Step 8: Push to GitHub
- This is the final step where you send your committed changes from your computer to your GitHub repository.
```bash
git push
```
- The first time you do this, you may need to specify the branch name. If your branch is `main` (the default), use this command:
```bash
git push -u origin main
```
- After the first time, you can just use `git push`.

---

### In Summary, the Daily Cycle is:

1.  **Work on your code.**
2.  `git add .` (Stage your changes)
3.  `git commit -m "Your commit message"` (Create a snapshot)
4.  `git push` (Send your changes to GitHub and trigger Render's deployment)

Don't worry about memorizing it all at once. Just keep this file handy and follow these steps each time you want to save and deploy your work. You'll be a pro in no time!







### Advanced Git Guide: Essential Commands and Concepts

This document provides a list of 100+ necessary commands and concepts for more advanced Git usage. This is a reference guide for when you need to go beyond the basic commit and push workflow.

---

### Part 1: Undoing Changes

1.  `git checkout -- <file>`
    - Discard changes in the working directory for a specific file.

2.  `git reset HEAD <file>`
    - Unstage a file from the staging area.

3.  `git commit --amend`
    - Amend the most recent commit. This lets you change the commit message or add more files.

4.  `git revert <commit-hash>`
    - Create a new commit that undoes all the changes of a previous commit. This is safe for public history.

5.  `git reset --soft <commit-hash>`
    - Move HEAD to a previous commit, but keep the changes staged.

6.  `git reset --hard <commit-hash>`
    - **DANGEROUS!** Move HEAD to a previous commit and discard all changes from that point forward.

7.  `git reflog`
    - View a log of all actions you've taken in the repository. This is your "undo history."

8.  `git clean -f`
    - Forcefully remove untracked files from the working directory.

9.  `git clean -df`
    - Remove untracked files and directories.

---

### Part 2: Viewing History and Status

10. `git log`
    - View the commit history.

11. `git log --oneline`
    - View a condensed, one-line version of the commit history.

12. `git log -p`
    - View the commit history with diffs (the actual changes made).

13. `git blame <file>`
    - Show who last modified each line of a file.

14. `git show <commit-hash>`
    - View the changes and metadata of a specific commit.

15. `git diff`
    - Show changes in the working directory that are not yet staged.

16. `git diff --staged`
    - Show changes in the staging area that are not yet committed.

17. `git diff <commit1> <commit2>`
    - Show the differences between two commits.

---

### Part 3: Working with Branches

18. `git branch`
    - List all branches in the repository.

19. `git branch <branch-name>`
    - Create a new branch.

20. `git checkout <branch-name>`
    - Switch to an existing branch.

21. `git checkout -b <new-branch-name>`
    - Create and switch to a new branch in a single command.

22. `git merge <branch-name>`
    - Merge a branch into the current active branch.

23. `git rebase <base-branch>`
    - Reapply commits on top of another base branch.

24. `git branch -d <branch-name>`
    - Delete a local branch (only works if the branch is merged).

25. `git branch -D <branch-name>`
    - Force delete a local branch.

26. `git push origin --delete <branch-name>`
    - Delete a branch on the remote repository.

---

### Part 4: Stashing Changes

27. `git stash`
    - Save your uncommitted changes temporarily without committing them.

28. `git stash list`
    - View a list of all your stashed changes.

29. `git stash apply`
    - Apply the most recent stash to your working directory.

30. `git stash pop`
    - Apply and then drop the most recent stash.

31. `git stash clear`
    - Delete all stashes from your list.

---

### Part 5: Remote Repositories

32. `git remote -v`
    - List the remote repositories you've configured.

33. `git fetch origin`
    - Download all the latest changes from the remote repository, but don't merge them.

34. `git pull`
    - Fetch and then immediately merge the latest changes from the remote.

35. `git push`
    - Upload your local commits to the remote repository.

36. `git clone <repository-url>`
    - Create a local copy of a remote repository.

37. `git remote rename <old-name> <new-name>`
    - Rename a remote repository.

---

### Part 6: Tagging

38. `git tag`
    - List all tags in the repository.

39. `git tag -a <tag-name> -m "Tag message"`
    - Create an annotated tag.

40. `git push --tags`
    - Push all your local tags to the remote.

---

### Part 7: Ignoring Files

41. `.gitignore` file
    - A file where you list files and folders that Git should ignore and not track. Add things like `node_modules/`, `.env`, and other dependencies.

---

### Part 8: Advanced Concepts

42. `git cherry-pick <commit-hash>`
    - Apply the changes of a single commit from another branch to your current branch.

43. `git bisect`
    - A powerful tool to find which commit introduced a bug by performing a binary search on your commit history.

44. `git rerere`
    - Stands for "reuse recorded resolution." It helps you resolve the same merge conflicts automatically in the future.

45. `git alias`
    - Create your own custom shortcuts for Git commands. E.g., `git config --global alias.co checkout`.

46. `git hooks`
    - Scripts that Git executes automatically when certain events occur (e.g., before a commit or after a push).

---

This guide is designed to provide a quick reference. For detailed usage, it is recommended to consult the official Git documentation.
