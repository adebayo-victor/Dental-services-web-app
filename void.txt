from cs50 import SQL
from datetime import datetime

# Connect to DB
db = SQL("sqlite:/// .db")

# -- Tables Creation --

# Clinic Info
db.execute("""
CREATE TABLE IF NOT EXISTS clinic_info (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    clinic_name TEXT NOT NULL,
    address TEXT NOT NULL,
    phone_number TEXT NOT NULL,
    email TEXT NOT NULL,
    operating_hours TEXT,
    tagline TEXT,
    facebook_url TEXT,
    instagram_url TEXT,
    twitter_url TEXT,
    maps_embed_url TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Services
db.execute("""
CREATE TABLE IF NOT EXISTS services (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    price REAL,
    fa_icon_class TEXT,
    is_active INTEGER DEFAULT 1,
    display_order INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Testimonials
db.execute("""
CREATE TABLE IF NOT EXISTS testimonials (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    quote TEXT NOT NULL,
    author_name TEXT NOT NULL,
    author_description TEXT,
    is_approved INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Team Members
db.execute("""
CREATE TABLE IF NOT EXISTS team_members (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    position TEXT NOT NULL,
    specialization TEXT,
    bio TEXT,
    image_url TEXT,
    is_active INTEGER DEFAULT 1,
    display_order INTEGER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Blog Posts
db.execute("""
CREATE TABLE IF NOT EXISTS blog_posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    content TEXT NOT NULL,
    author_id INTEGER,
    published_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    featured_image_url TEXT,
    is_published INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Patients
db.execute("""
CREATE TABLE IF NOT EXISTS patients (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    gender TEXT,
    date_of_birth DATE,
    address TEXT,
    registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# Appointments
db.execute("""
CREATE TABLE IF NOT EXISTS appointments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    patient_id INTEGER NOT NULL,
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    appointment_code TEXT UNIQUE NOT NULL,
    message TEXT,
    status TEXT DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(patient_id) REFERENCES patients(id)
)
""")

# Users
db.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role TEXT DEFAULT 'admin',
    is_active INTEGER DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
""")

# -- Insert Sample Dumps --

now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

db.execute("INSERT INTO clinic_info (clinic_name, address, phone_number, email, operating_hours, tagline) VALUES (?, ?, ?, ?, ?, ?)", 
           "Zaclice   Care", "123   Street", "08012345678", "clinic@example.com", "Mon–Fri: 9am–5pm", "Brightening Smiles Daily")

db.execute("INSERT INTO services (name, description, price, fa_icon_class) VALUES (?, ?, ?, ?)", 
           "Teeth Cleaning", "Professional   cleaning to remove plaque and tartar.", 10000.00, "fas fa-tooth")

db.execute("INSERT INTO testimonials (quote, author_name, author_description, is_approved) VALUES (?, ?, ?, ?)", 
           "They saved my smile!", "Sarah T.", "Patient since 2022", 1)

db.execute("INSERT INTO team_members (name, position, specialization, bio, image_url) VALUES (?, ?, ?, ?, ?)", 
           "Dr. Kelvin White", "Chief  ", "Orthodontics", "Experienced orthodontist with a love for perfecting smiles.", "https://example.com/drkelvin.jpg")

db.execute("INSERT INTO blog_posts (title, slug, content) VALUES (?, ?, ?)", 
           "Why Regular Checkups Matter", "regular-checkups", "  checkups help prevent major oral issues.")

db.execute("INSERT INTO patients (full_name, email, phone, gender, date_of_birth, address) VALUES (?, ?, ?, ?, ?, ?)", 
           "Victor Light", "victor@example.com", "08098765432", "Male", "1999-09-09", "Lagos, Nigeria")

db.execute("INSERT INTO appointments (patient_id, appointment_date, appointment_time, appointment_code, message) VALUES (?, ?, ?, ?, ?)", 
           1, "2025-07-12", "14:00", "APPT-VIC-20250712", "Mild toothache and cleaning needed")

db.execute("INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)", 
           "admin", "admin@ .com", "hashedpassword123")

print("✅ All tables created and sample data dumped.")








/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>  Admin Dashboard - Modern Tech</title>
    <link href="https://fonts.googleapis.com/css2?family=Chakra+Petch:wght@300;400;500;600;700&family=Orbitron:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="{{url_for('static', filename='assets/css/fontawesome-all.min.css')}}" />
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Custom Colors from your   website */
        :root {
            --primary-blue: #0F1E5E; /* Deep Blue */
            --secondary-blue: #1A2B6A; /* Slightly lighter blue for cards/elements */
            --accent-red: #E00000;   /* Vibrant Red */
            --text-light: #F0F0F0;   /* Light Off-White Text */
            --bg-dark-primary: #0B1641; /* Very dark background */
            --border-glow: rgba(224, 0, 0, 0.4); /* Red glow for focus/hover */
            --input-bg: rgba(15, 30, 94, 0.6); /* Semi-transparent blue for inputs */
        }

        body {
            font-family: 'Chakra Petch', sans-serif; /* Modern, slightly techy font */
            background-color: var(--bg-dark-primary);
            color: var(--text-light);
        }

        /* Applying custom colors to Tailwind */
        .bg-primary-blue { background-color: var(--primary-blue); }
        .bg-secondary-blue { background-color: var(--secondary-blue); }
        .text-accent-red { color: var(--accent-red); }
        .hover\:bg-accent-red:hover { background-color: var(--accent-red); }
        .border-accent-red { border-color: var(--accent-red); }
        .focus\:border-accent-red:focus { border-color: var(--accent-red); }
        .focus\:ring-accent-red:focus { --tw-ring-color: var(--accent-red); }

        /* Specific styles for the tech look */
        .card-glass {
            background-color: rgba(26, 43, 106, 0.4); /* Semi-transparent secondary blue */
            backdrop-filter: blur(5px); /* Subtle blur effect */
            border: 1px solid rgba(224, 0, 0, 0.1); /* Very subtle red border */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2), 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 15px var(--border-glow); /* Enhanced shadow with glow */
            transition: all 0.3s ease-in-out;
        }
        .card-glass:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3), 0 1px 5px rgba(0, 0, 0, 0.15), 0 0 25px var(--border-glow);
        }

        .input-tech {
            background-color: var(--input-bg);
            border: 1px solid var(--primary-blue);
            color: var(--text-light);
            transition: all 0.2s ease-in-out;
        }
        .input-tech:focus {
            outline: none;
            border-color: var(--accent-red);
            box-shadow: 0 0 0 2px var(--accent-red), 0 0 10px var(--border-glow);
        }
        .input-tech::placeholder {
            color: rgba(240, 240, 240, 0.6);
        }

        .btn-primary-tech {
            background-color: var(--accent-red);
            transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            cursor: pointer; /* Add cursor pointer for span buttons */
        }
        .btn-primary-tech:hover {
            background-color: #C00000; /* Darker red on hover */
            box-shadow: 0 4px 10px rgba(0,0,0,0.3), 0 0 25px var(--border-glow);
        }
        .btn-secondary-tech {
            background-color: var(--primary-blue);
            color: var(--text-light);
            transition: background-color 0.2s ease-in-out;
            cursor: pointer; /* Add cursor pointer for span buttons */
        }
        .btn-secondary-tech:hover {
            background-color: var(--secondary-blue);
        }

        /* Active Navigation Link Styling */
        .nav-link.active {
            background-color: var(--accent-red); /* Solid red background for active */
            color: white;
            font-weight: 600;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.4), 0 0 15px var(--border-glow);
        }
        .nav-link.active i {
            color: white !important; /* Ensure icon is white too */
        }
        .nav-link:hover {
            background-color: rgba(224, 0, 0, 0.4); /* Lighter red hover for non-active */
            color: var(--text-light);
        }

        /* Custom styles for sidebar & overlay for mobile responsiveness */
        .sidebar {
            transform: translateX(0);
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            position: sticky;
            top: 0;
            z-index: 30;
            height: 100vh;
            background: linear-gradient(180deg, var(--primary-blue) 0%, #080d2b 100%); /* Subtle gradient */
            border-right: 1px solid rgba(224, 0, 0, 0.1);
            box-shadow: 5px 0 15px rgba(0,0,0,0.3);
            display: flex; /* Use flex to manage inner content */
            flex-direction: column; /* Stack content vertically */
        }
        /* Added for scrollability within the sidebar's navigation */
        .sidebar nav {
            flex-grow: 1; /* Allow nav to take available space */
            overflow-y: auto; /* Add scrollbar if content overflows vertically */
            padding-right: 8px; /* Add some padding for the scrollbar */
        }


        @media (max-width: 767px) {
            .sidebar {
                position: fixed;
                transform: translateX(-100%);
            }
            .sidebar.open {
                transform: translateX(0);
            }
            .main-content {
                margin-left: 0;
            }
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 20;
            display: none;
        }
        .overlay.active {
            display: block;
        }

        /* Ensure header search input and buttons stack on very small screens */
        @media (max-width: 480px) {
            header.flex-col {
                align-items: flex-start;
            }
            header .relative {
                margin-right: 0;
            }
            header .flex-1 {
                margin-bottom: 1rem;
            }
        }

        /* Scrollbar styling for a techier look */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px; /* For horizontal scrollbars */
        }

        ::-webkit-scrollbar-track {
            background: var(--bg-dark-primary);
        }

        ::-webkit-scrollbar-thumb {
            background-color: var(--primary-blue);
            border-radius: 4px;
            border: 2px solid var(--bg-dark-primary);
        }

        ::-webkit-scrollbar-thumb:hover {
            background-color: var(--accent-red);
        }
        .overlay-container {
            position: fixed; /* Covers the entire viewport */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */
            z-index: 999; /* Ensures it's on top */

            /* Blur effect for the background content */
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px); /* Safari compatibility */

            /* Initial hidden state with smooth transition */
            opacity: 0; /* Starts fully transparent */
            pointer-events: none; /* Prevents interaction when hidden */
            display: flex; /* Always flex to center content, but hidden by opacity/pointer-events */
            align-items: center; /* Centers vertically */
            justify-content: center; /* Centers horizontally */
            transition: opacity 0.3s ease-in-out; /* Smooth fade-in/out */
        }

        /* The 'visible' class: when added, makes the overlay fully opaque and interactive */
        .overlay-container.visible {
            opacity: 1; /* Fully visible */
            pointer-events: auto; /* Allows interaction */
        }

        /* Optional: Styles for the content *inside* your overlay (e.g., a modal box) */
        .overlay-content {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            transform: scale(0.9); /* Start slightly smaller for subtle pop-in */
            transition: transform 0.3s ease-out; /* Smooth transform transition */
        }

        .overlay-container.visible .overlay-content {
            transform: scale(1); /* Scale to normal size when visible */
        }
        .service_overlay{
            background-color: #080d2b;
        }
        .view-appointment-overlay, .manage-testimonials-overlay, .all-patients-overlay, .view-patient-details-overlay, .update-patient-overlay, .all-visits-overlay, .view-visit-details-overlay, .admin-auth-overlay, .forgot-password-overlay {
            /* Reusing existing overlay styles */
            opacity: 0;
            visibility: hidden;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent dark background */
            backdrop-filter: blur(8px); /* Blur the content behind the overlay */
            -webkit-backdrop-filter: blur(8px); /* Safari support */
            z-index: 1000; /* Ensure it's on top of everything */
            display: flex;
            justify-content: center;
            align-items: center;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }
        .view-appointment-overlay.visible, .manage-testimonials-overlay.visible, .all-patients-overlay.visible, .view-patient-details-overlay.visible, .update-patient-overlay.visible, .all-visits-overlay.visible, .view-visit-details-overlay.visible, .admin-auth-overlay.visible, .forgot-password-overlay.visible {
            opacity: 1;
            visibility: visible;
        }

        /* Styles for testimonial summary boxes in admin panel */
        .testimonial-admin-summary-box {
            background-color: rgba(15, 30, 94, 0.6); /* input-bg for consistency */
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: 1px solid var(--primary-blue);
        }
        .testimonial-admin-summary-box:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            border-color: var(--accent-red);
        }
        .testimonial-admin-summary-box .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Style for the full testimonial display within the admin overlay */
        .full-testimonial-display-admin {
            background-color: var(--secondary-blue); /* Slightly lighter blue for content */
            padding: 2.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            max-width: 600px; /* Adjust max-width as needed */
            width: 90%;
            position: relative;
            transform: translateY(20px);
            transition: transform 0.3s ease;
            color: var(--text-light);
            max-height: 90vh;
            overflow-y: auto;
            text-align: center;
            display: flex; /* Use flex for centering content */
            flex-direction: column;
            justify-content: center;
            align-items: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
            z-index: 1010; /* Higher z-index to appear on top of summary grid */
        }
        .full-testimonial-display-admin.visible {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }

        /* CSS for the new team member update overlay */
        .update-member-overlay, .edit-service-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent dark background */
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
            z-index: 1000;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
        }

        .update-member-overlay:target, .edit-service-overlay:target {
            opacity: 1;
            visibility: visible;
        }

        .update-member-content, .edit-service-content, .all-patients-content, .view-patient-details-content, .update-patient-content, .all-visits-content, .view-visit-details-content, .admin-auth-content, .forgot-password-content {
            background-color: var(--secondary-blue);
            padding: 2.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            max-width: 600px;
            width: 90%;
            position: relative;
            color: var(--text-light);
            max-height: 90vh;
            overflow-y: auto;
        }
        .admin-auth-content, .forgot-password-content {
            max-width: 450px; /* Smaller for auth forms */
        }

        .close-button {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-light);
            cursor: pointer;
            transition: color 0.2s ease;
        }
        .close-button:hover {
            color: var(--accent-red);
        }

        /* Scrollable content areas */
        .scrollable-content-appointments, .scrollable-content-patients, .scrollable-content-bills, .scrollable-content-visits {
            max-height: 400px; /* Adjust as needed */
            overflow-y: auto;
            border: 1px solid var(--primary-blue); /* Optional: add a border to indicate scrollability */
            border-radius: 0.5rem;
        }

        .scrollable-content-testimonials {
            max-height: 300px; /* Adjust as needed */
            overflow-y: auto;
            border: 1px solid var(--primary-blue); /* Optional: add a border to indicate scrollability */
            border-radius: 0.5rem;
            padding: 1rem; /* Add padding for better appearance */
        }
        /* Style for the testimonial summary grid within the overlay */
        #testimonialAdminSummaryGrid {
            max-height: 60vh; /* Set a max height for the grid itself */
            overflow-y: auto; /* Make the grid scrollable */
            padding-right: 10px; /* Add some padding for the scrollbar */
        }

        /* Toast Notification Styles */
        #toast-notification {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
            z-index: 1001; /* Above overlays */
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }

        #toast-notification.show {
            opacity: 1;
            visibility: visible;
        }

        /* Custom scrollbar for the new bills section */
        .custom-scrollbar::-webkit-scrollbar, .scrollable-content-bills::-webkit-scrollbar {
            width: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track, .scrollable-content-bills::-webkit-scrollbar-track {
            background: var(--bg-dark-primary);
        }

        ::-webkit-scrollbar-thumb, .scrollable-content-bills::-webkit-scrollbar-thumb {
            background-color: var(--primary-blue);
            border-radius: 4px;
            border: 2px solid var(--bg-dark-primary);
        }

        ::-webkit-scrollbar-thumb:hover, .scrollable-content-bills::-webkit-scrollbar-thumb:hover {
            background-color: var(--accent-red);
        }

        /* Styles for the main content to be hidden initially */
        body.auth-required > *:not(.admin-auth-overlay):not(.forgot-password-overlay) {
            display: none;
        }
        body.auth-required {
            overflow: hidden; /* Prevent scrolling of background content */
        }

        /* Custom file input styling */
        .custom-file-upload {
            border: 1px solid var(--primary-blue);
            display: inline-block;
            padding: 8px 12px;
            cursor: pointer;
            background-color: var(--input-bg);
            color: var(--text-light);
            border-radius: 0.5rem;
            transition: all 0.2s ease-in-out;
        }
        .custom-file-upload:hover {
            background-color: var(--secondary-blue);
            border-color: var(--accent-red);
        }
        .custom-file-upload input[type="file"] {
            display: none;
        }
    </style>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" xintegrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2gFLKPXNq4rVz/hzWj6ws+M4Vc/o9Zk8T+SVDu5zK32M4T2F+K3001vJkQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body class="flex flex-col md:flex-row min-h-screen auth-required">

    <!-- Toast Notification -->
    <div id="toast-notification"></div>

    <div id="sidebar-overlay" class="overlay"></div>

    <!-- Admin Login Overlay -->
    <div id="adminLoginOverlay" class="admin-auth-overlay visible">
        <div class="admin-auth-content">
            <h2 class="text-3xl font-bold text-white mb-8 text-center">Admin Login</h2>
            <form id="adminLoginForm" class="space-y-6">
                <div>
                    <label for="admin_password" class="block text-gray-300 text-sm font-bold mb-2">Password</label>
                    <input type="password" id="admin_password" name="password"
                           class="input-tech shadow appearance-none border rounded w-full py-3 px-4 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary"
                           placeholder="********" required>
                </div>
                <button type="submit" class="w-full bg-accent-red text-white px-6 py-3 rounded-full text-lg font-semibold hover:bg-[#C00000] transition-colors duration-300 transform hover:scale-105">
                    Login
                </button>
            </form>
            <p id="adminLoginMessage" class="text-center mt-4 text-red-400"></p>
            <p class="text-center text-gray-400 mt-6">
                <a href="#" id="forgotPasswordLink" class="text-accent-red hover:underline">Forgot Password?</a>
            </p>
        </div>
    </div>

    <!-- NEW: Forgot Password Overlay -->
    <div id="forgotPasswordOverlay" class="forgot-password-overlay">
        <div class="forgot-password-content card-glass p-8 rounded-xl relative">
            <span id="closeForgotPasswordOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Forgot Password</h2>
            <form id="forgotPasswordForm" class="space-y-6">
                <div>
                    <label for="forgot_password_email" class="block text-gray-300 text-sm font-bold mb-2">Admin Email</label>
                    <input type="email" id="forgot_password_email" name="email"
                           class="input-tech shadow appearance-none border rounded w-full py-3 px-4 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary"
                           placeholder="admin@example.com" required>
                </div>
                <div>
                    <label for="forgot_password_position" class="block text-gray-300 text-sm font-bold mb-2">Admin Position</label>
                    <input type="text" id="forgot_password_position" name="position"
                           class="input-tech shadow appearance-none border rounded w-full py-3 px-4 text-white leading-tight focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary"
                           placeholder="e.g., Admin, Doctor" required>
                </div>
                <button type="button" id="generateTempPasswordBtn" class="w-full bg-primary-blue text-white px-6 py-3 rounded-full text-lg font-semibold hover:bg-secondary-blue transition-colors duration-300 transform hover:scale-105">
                    Generate New Password
                </button>
            </form>
            <div id="forgotPasswordSuccessDisplay" class="text-center mt-6 hidden">
                <p id="forgotPasswordSuccessMessage" class="text-green-400 text-md"></p>
            </div>
            <p id="forgotPasswordMessage" class="text-center mt-4 text-red-400"></p>
        </div>
    </div>


    <aside id="sidebar" class="sidebar w-64 p-6 flex flex-col justify-between shadow-lg md:h-screen z-40">
        <div>
            <div class="text-white text-3xl font-bold mb-10 text-center font-orbitron">
                <span class="text-accent-red">D</span>ENTAL <span class="text-accent-red">A</span>DMIN
            </div>
            <nav>
                <ul class="space-y-3">
                    <li>
                        <a href="#dashboard" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-chart-line text-lg text-accent-red"></i>
                            <span class="text-lg">Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="#services" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-tooth text-lg text-accent-red"></i>
                            <span class="text-lg">Services</span>
                        </a>
                    </li>
                    <li>
                        <a href="#appointments" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-calendar-check text-lg text-accent-red"></i>
                            <span class="text-lg">Appointments</span>
                        </a>
                    </li>
                    <li>
                        <a href="#testimonials" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-quote-right text-lg text-accent-red"></i>
                            <span class="text-lg">Testimonials</span>
                        </a>
                    </li>
                    <li>
                        <a href="#team" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-user-md text-lg text-accent-red"></i>
                            <span class="text-lg">Team Members</span>
                        </a>
                    </li>
                    <li>
                        <div class="flex items-center justify-between p-1 rounded-lg">
                            <a href="#bills" class="nav-link flex items-center space-x-3 p-2 flex-grow text-white transition-colors duration-200">
                                <i class="fas fa-file-invoice-dollar text-lg text-accent-red"></i>
                                <span class="text-lg">Bills</span>
                            </a>
                            <span id="openBillsSectionSidebarBtn" class="ml-2 p-2 rounded-full bg-primary-blue hover:bg-accent-red transition-colors duration-200 cursor-pointer" title="View All Bills">
                                <i class="fas fa-expand-alt text-white text-sm"></i>
                            </span>
                        </div>
                    </li>
                    <li>
                        <a href="#blog" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-newspaper text-lg text-accent-red"></i>
                            <span class="text-lg">Blog/News</span>
                        </a>
                    </li>
                    <li>
                        <a href="#settings" class="nav-link flex items-center space-x-3 p-3 rounded-lg text-white transition-colors duration-200">
                            <i class="fas fa-cog text-lg text-accent-red"></i>
                            <span class="text-lg">Settings</span>
                        </a>
                    </li>
                    <!-- The download link is moved to the dashboard section -->
                </ul>
            </nav>
        </div>
        <div class="text-center text-gray-500 text-sm pb-4">
            &copy; 2025   Admin.
        </div>
    </aside>

    <main class="flex-1 p-4 md:p-8 overflow-y-auto main-content">
        <header class="flex flex-col md:flex-row justify-between items-center bg-secondary-blue p-4 rounded-lg shadow-xl mb-8 card-glass">
            <button id="sidebar-toggle-btn" class="md:hidden text-accent-red text-2xl mr-4 p-2 rounded hover:bg-primary-blue focus:outline-none focus:ring-2 focus:ring-accent-red">
                <i class="fas fa-bars"></i>
            </button>
            <div class="relative flex-1 md:mr-4 w-full md:w-auto mb-4 md:mb-0">
                <input type="text" placeholder="Search..." class="input-tech w-full pl-10 pr-4 py-2 rounded-lg focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">
                <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
            </div>
            <div class="flex items-center space-x-4">
                <button class="text-accent-red hover:text-red-400 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-red rounded-full p-2">
                    <i class="fas fa-bell text-xl"></i>
                </button>
                <div class="flex items-center space-x-2">
                    <img src="https://via.placeholder.com/40" alt="Admin Avatar" class="w-10 h-10 rounded-full mx-auto border-2 border-accent-red object-cover shadow-lg">
                    <div>
                        <span id="adminNameDisplay" class="text-white font-medium hidden sm:block">Admin User</span>
                        <span id="adminLoginTimeDisplay" class="text-gray-400 text-xs hidden sm:block"></span>
                    </div>
                </div>
                <button id="adminLogoutButton" class="text-white hover:text-accent-red transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-accent-red rounded-full p-2">
                    <i class="fas fa-sign-out-alt text-xl"></i>
                </button>
            </div>
        </header>

        <section id="dashboard" class="mb-8 scroll-mt-24">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Dashboard Overview</h1>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 gap-6">
                <div class="p-6 rounded-lg shadow-xl flex items-center justify-between card-glass">
                    <div>
                        <a href="#appointments"><p class="text-gray-400 text-sm">Total Appointments</p></a>
                        <a href="#appointments"><p class="text-white text-2xl md:text-3xl font-bold">{{appointment_count}}</p></a>
                    </div>
                    <i class="fas fa-calendar-plus text-accent-red text-4xl opacity-75"></i>
                </div>
                <!-- Total Patients Card - Add ID and cursor-pointer -->
                <div class="p-6 rounded-lg shadow-xl flex items-center justify-between card-glass cursor-pointer" id="totalPatientsCard">
                    <div>
                        <p class="text-gray-400 text-sm">Total Patients</p>
                        <p class="text-white text-2xl md:text-3xl font-bold">{{patient_count}}</p>
                    </div>
                    <i class="fas fa-users text-accent-red text-4xl opacity-75"></i>
                </div>
                <!-- Revenue Card - Added ID for click event -->
                <div class="p-6 rounded-lg shadow-xl flex items-center justify-between card-glass cursor-pointer" id="revenueCard">
                    <div>
                        <p class="text-gray-400 text-sm">Revenue (Total)</p>
                        <p class="text-white text-2xl md:text-3xl font-bold">₦{{revenue}}</p>
                    </div>
                    <i class="fas fa-dollar-sign text-accent-red text-4xl opacity-75"></i>
                </div>
                <!-- Website Visits Card - Added ID and cursor-pointer -->
                <div class="p-6 rounded-lg shadow-xl flex items-center justify-between card-glass cursor-pointer" id="websiteVisitsCard">
                    <div>
                        <p class="text-gray-400 text-sm">Website Visits</p>
                        <p class="text-white text-2xl md:text-3xl font-bold">{{visit}}</p>
                    </div>
                    <i class="fas fa-globe text-accent-red text-4xl opacity-75"></i>
                </div>
                <!-- NEW: Download Data (Excel) Card -->
                <a href="/download_excel" download class="p-6 rounded-lg shadow-xl flex items-center justify-between card-glass cursor-pointer">
                    <div>
                        <p class="text-gray-400 text-sm">Download Data</p>
                        <p class="text-white text-2xl md:text-3xl font-bold">Excel</p>
                    </div>
                    <i class="fas fa-file-excel text-accent-red text-4xl opacity-75"></i>
                </a>
            </div>

            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">
                <div class="p-6 rounded-lg shadow-xl card-glass">
                    <h3 class="text-xl font-semibold text-white mb-4">Appointments Trend</h3>
                    <canvas class="h-64 bg-primary-blue/50 rounded-lg flex items-center justify-center text-gray-400 border border-primary-blue" id="appointment_chart">
                        <!--<p>Chart Placeholder (e.g., Line Chart)</p>-->
                    </canvas>
                </div>
                <div class="p-6 rounded-lg shadow-xl card-glass">
                    <h3 class="text-xl font-semibold text-white mb-4">Service Popularity</h3>
                    <canvas class="h-64 bg-primary-blue/50 rounded-lg flex items-center justify-center text-gray-400 border border-primary-blue" id="service_chart">
                        <p>Chart Placeholder (e.g., Bar Chart)</p>
                    </canvas>
                </div>
            </div>
        </section>

        <section id="services" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Services</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Current Services</h2>
                <div class="overflow-x-auto mb-6">
                    <table class="min-w-full bg-primary-blue/50 rounded-lg overflow-hidden border border-primary-blue">
                        <thead>
                            <tr class="text-left text-gray-300 bg-primary-blue/70">
                                <th class="py-3 px-4">Icon</th>
                                <th class="py-3 px-4">Service Name</th>
                                <th class="py-3 px-4">Price</th>
                                <th class="py-3 px-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="service-body">
                            {% if services %}
                                {% for service in services %}
                                    <tr class="border-t border-primary-blue/70 hover:bg-secondary-blue/50 transition-colors service-info" service-id={{service.id}}>
                                        <td class="py-3 px-4 service-icon"><i class="fas {{service.fa_icon_class}} text-accent-red"></i></td>
                                        <td class="py-3 px-4 service-name">{{service.name}}</td>
                                        <td class="py-3 px-4 service-price">{{service.price}}</td>
                                        <td class="py-3 px-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                            <a href="#editServiceOverlay" class="btn-primary-tech px-3 py-1 rounded text-white text-sm service-edit-btn"
                                               data-id="{{ service.id }}"
                                               data-name="{{ service.name }}"
                                               data-price="{{ service.price }}"
                                               data-description="{{ service.description }}"
                                               data-icon="{{ service.fa_icon_class }}">Edit</a>
                                            <span class="btn-secondary-tech px-3 py-1 rounded text-white text-sm service-delete">Delete</span>
                                        </td>
                                    </tr> 
                                {% endfor %}
                            {% else %}
                                <h3>No services found in database</h3>
                            {% endif %}
                        </tbody>
                    </table>
                </div>

                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Add New Service</h2>
                <form class="space-y-4">
                    <div>
                        <label for="new_service_name" class="block text-gray-300 text-sm font-bold mb-2">Service Name</label>
                        <input type="text" id="new_service_name" name="new_service_name" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Root Canal Therapy">
                    </div>
                    <div>
                        <label for="new_service_price" class="block text-gray-300 text-sm font-bold mb-2">Price</label>
                        <input type="number" step="0.01" id="new_service_price" name="new_service_price" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., 250.00">
                    </div>
                    <div>
                        <label for="new_service_description" class="block text-gray-300 text-sm font-bold mb-2">Description</label>
                        <input type="text" step="0.01" id="new_service_description" name="new_service_description" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Describe the service">
                    </div>
                    <div class="selected-icon">
                        <h3>Selected icon:</h3>
                        <i class=" fas fa-plus-circle text-4xl text-red-600"></i>
                    </div>
                    <span class="service-select btn-secondary-tech px-3 py-1 rounded text-white text-sm">Select Icon</span>
                    <div class="flex flex-wrap gap-4 p-6 bg-white rounded-lg shadow-md max-w-2xl mx-auto service_overlay">
                        <h2 class="w-full text-xl font-bold text-gray-800 mb-4">Available Service Icons:</h2>
                        {% for icon in icons%}
                            <i class="icon fas {{icon}} text-4xl text-blue-600" icon_class="{{icon}}"></i>
                        {% endfor %}
                    </div>
                    <span  class="btn-primary-tech text-white px-6 py-2 rounded-lg" id="add-new-service">Add Service</span>
                </form>
            </div>
        </section>

        <section id="appointments" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Appointments</h1>
            <span class="bg-red-600 text-white text-xs px-5 py-2 rounded-full validate-appointments btn-primary-tech"  id="validate-appointments">Validate appointment</span>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <form class="mb-6">
                    <div class="flex flex-wrap items-center space-x-4">
                        <div class="flex-1 min-w-[100px]">
                            <label for="expiry_days" class="block text-gray-300 text-sm font-bold mb-2">Days</label>
                            <input value="{{expiry_info[0]}}" type="number" id="expiry_days" name="expiry_days" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline" placeholder="Days">
                        </div>
                        <div class="flex-1 min-w-[100px]">
                            <label for="expiry_hours" class="block text-gray-300 text-sm font-bold mb-2">Hours</label>
                            <input value="{{expiry_info[1]}}" type="number" id="expiry_hours" name="expiry_hours" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline" placeholder="Hours">
                        </div>
                        <div class="flex-1 min-w-[100px]">
                            <label for="expiry_minutes" class="block text-gray-300 text-sm font-bold mb-2">Minutes</label>
                            <input value="{{expiry_info[2]}}" type="number" id="expiry_minutes" name="expiry_minutes" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline" placeholder="Minutes">
                        </div>
                        <div class="flex-1 min-w-[100px]">
                            <label for="expiry_seconds" class="block text-gray-300 text-sm font-bold mb-2">Seconds</label>
                            <input value="{{expiry_info[3]}}" type="number" id="expiry_seconds" name="expiry_seconds" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline" placeholder="Seconds">
                        </div>
                    </div>
                    <span id="set-expiry" class="btn-primary-tech text-white px-6 py-2 rounded-lg mt-4">Set Expiry</span>
                </form>
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Upcoming Appointments</h2>
                <!-- Search Bar for Appointments -->
                <div class="relative mb-4">
                    <input type="text" placeholder="Search appointments..." class="input-tech w-full pl-10 pr-4 py-2 rounded-lg focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" id="appointment-search-input">
                    <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 " id="search-button"></i>
                </div>
                <div class="scrollable-content-appointments mb-6">
                    <table class="min-w-full bg-primary-blue/50 rounded-lg overflow-hidden border border-primary-blue">
                        <thead>
                            <tr class="text-left text-gray-300 bg-primary-blue/70">
                                <th class="py-3 px-4">Patient Name</th>
                                <th class="py-3 px-4">Booked date</th>
                                <th class="py-3 px-4">Booked time</th>
                                <th class="py-3 px-4">Info</th>
                                <th class="py-3 px-4">Status</th>
                                <th class="py-3 px-4">Expires</th>
                                <th class="py-3 px-4">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="appointment-body">
                            {% if appointments %}
                                {% for appointment in appointments %}
                                    <tr class="border-t border-primary-blue/70 hover:bg-secondary-blue/50 transition-colors appointment" appointment-id="{{appointment.id}}">
                                        <td class="py-3 px-4 name">{{appointment.full_name}}</td>
                                        <td class="py-3 px-4 date">{{appointment.booked_date}}</td>
                                        <td class="py-3 px-4 time">{{appointment.booked_time}}</td>
                                        <td class="py-3 px-4 notes">{{appointment.notes}}</td>
                                        <td class="py-3 px-4"><span class="bg-yellow-600 text-white text-xs px-2 py-1 rounded-full">{{appointment.status}}</span></td>
                                        <td class="py-3 px-4">{{appointment.expiry_date}}</td>
                                        <td class="py-3 px-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                            <span class="btn-primary-tech px-3 py-1 rounded text-white text-sm view-appointment">view</span>
                                        </td>
                                    </tr> 
                                {% endfor %}
                            {% else %}
                                <h3 class="text-red-400">No appointment data is being served from the backend</h3>
                            {% endif %}
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <section id="testimonials" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Testimonials</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Existing Testimonials</h2>
                <div class="scrollable-content-testimonials space-y-4 mb-6">
                    {% if testimonials %}
                        {% for testimonial in testimonials %}
                        <div class="p-4 bg-primary-blue/50 rounded-lg shadow border border-primary-blue">
                            <p class="text-gray-300 italic mb-2 line-clamp-3">"{{testimonial.quote}}"</p>
                            <p class="text-white font-semibold">- {{testimonial.author_name}}</p>
                            <p class="text-gray-400 text-sm">{{testimonial.author_description}}</p>
                            </div>
                        {% endfor %}
                    {% else %}
                        <p class="text-gray-400">No testimonials found in the database.</p>
                    {% endif %}
                </div>
                <span id="openManageTestimonialsOverlayBtn" class="btn-primary-tech text-white px-6 py-2 rounded-lg mt-4">
                    See All Testimonials
                </span>
            </div>
        </section>

        <section id="team" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Team Members</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Our Team</h2>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-6 team-member-container">
                        {% if team_members %}
                            {% for team_member in team_members %}
                                <div class="p-4 bg-primary-blue/50 rounded-lg shadow border border-primary-blue text-center member-info" member_id="{{team_member.id}}">
                                    <img src="{{team_member.image_url}}"  class="w-24 h-24 rounded-full mx-auto mb-4 border-2 border-accent-red object-cover shadow-md" id="member-img">
                                    <h3 class="text-white text-xl font-semibold" id="member-name">{{team_member.name}}</h3>
                                    <p class="text-gray-400 mb-2" id="member-position">{{team_member.position}}
                                        {{team_member.specialization}}
                                    </p>
                                    <p class="text-gray-300 text-sm" id="member-bio">{{team_member.bio}}</p>
                                    <div class="mt-3 space-x-2 flex flex-col sm:flex-row space-y-2 sm:space-y-0 justify-center">
                                        <a href="#updateTeamMemberOverlay" class="btn-primary-tech px-3 py-1 rounded text-white text-sm"
                                           data-id="{{team_member.id}}"
                                           data-name="{{team_member.name}}"
                                           data-position="{{team_member.position}}"
                                           data-specialization="{{team_member.specialization}}"
                                           data-bio="{{team_member.bio}}"
                                           data-image="{{team_member.image_url}}"
                                           data-email="{{team_member.email}}"
                                           data-phone="{{team_member.phone_number}}"
                                           id="member_edit">Edit</a>
                                        <span class="btn-secondary-tech px-3 py-1 rounded text-white text-sm" id="member_delete" member_id="{{team_member.id}}">Delete</span>
                                    </div>
                                </div>
                            {% endfor %}s
                        {% else %}
                            <h3>You have not added a team member ,its just you, eheh 🤔</h3>
                        {% endif %}
                </div>
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Add New Team Member</h2>
                <form class="space-y-4" id="addTeamMemberForm">
                    <div>
                        <label for="member_name" class="block text-gray-300 text-sm font-bold mb-2">Name</label>
                        <input type="text" id="member_name" name="member_name" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Dr. Alice Brown">
                    </div>
                    <div>
                        <label for="member_position" class="block text-gray-300 text-sm font-bold mb-2">Position</label>
                        <input type="text" id="member_position" name="member_position" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Orthodontist">
                    </div>
                    <div>
                        <label for="member_specialization" class="block text-gray-300 text-sm font-bold mb-2">Specialization</label>
                        <input type="text" id="member_specialization" name="specialization" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Orthodontics">
                    </div>
                    <div>
                        <label for="member_bio" class="block text-gray-300 text-sm font-bold mb-2">Bio/Description</label>
                        <textarea id="member_bio" name="member_bio" rows="3" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Short description of their expertise..."></textarea>
                    </div>
                    <div>
                        <label for="member_image" class="block text-gray-300 text-sm font-bold mb-2">Image</label>
                        <label for="member_image_file" class="custom-file-upload">
                            📁 Choose file
                        </label>
                        <input type="file" id="member_image_file" name="member_image" class="hidden" onchange="updateLabel(this, 'member_image_file_label')">
                        <span id="member_image_file_label" class="text-gray-400 text-sm ml-2">No file chosen</span>
                    </div>
                    <div>
                        <label for="member_email" class="block text-gray-300 text-sm font-bold mb-2">Email</label>
                        <input type="email" id="member_email" name="email" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., alice.brown@example.com">
                    </div>
                    <div>
                        <label for="member_phone" class="block text-gray-300 text-sm font-bold mb-2">Phone</label>
                        <input type="tel" id="member_phone" name="phone" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., +1234567890">
                    </div>
                    <span  class="btn-primary-tech text-white px-6 py-2 rounded-lg" id="add-new-member">Add Team Member</span>
                </form>
            </div>
        </section>

        <section id="bills" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Bills</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">All Bills</h2>
                <div class="scrollable-content-bills mb-6"> <!-- Added scrollable-content-bills class -->
                    <table class="min-w-full bg-primary-blue/50 rounded-lg overflow-hidden border border-primary-blue">
                        <thead>
                            <tr class="text-left text-gray-300 bg-primary-blue/70">
                                <th class="py-3 px-4">Bill ID</th>
                                <th class="py-3 px-4">Patient ID</th>
                                <th class="py-3 px-4">Appt. Date</th>
                                <th class="py-3 px-4">Appt. Time</th>
                                <th class="py-3 px-4">Expiry Date</th>
                                <th class="py-3 px-4">Appt. Code</th>
                                <th class="py-3 px-4">Message</th>
                                <th class="py-3 px-4">Bill Amount</th>
                                <th class="py-3 px-4">Status</th>
                                <th class="py-3 px-4">Created At</th>
                                <th class="py-3 px-4">Updated At</th>
                            </tr>
                        </thead>
                        <tbody id="billsTableBody">
                            <!-- Bill data will be dynamically inserted here -->
                            <h3 class="text-red-400">No bill data is being served from the backend</h3>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <section id="blog" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">Manage Blog/News</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Latest Posts</h2>
                <div class="space-y-4 mb-6">
                    {%if blogs %}
                        {% for blog in blogs %}
                        <div class="p-4 bg-primary-blue/50 rounded-lg shadow border border-primary-blue blog_container">
                            <h3 class="text-lg md:text-xl font-semibold text-white mb-2">{{blog.title}}</h3>
                            <p class="text-gray-400 text-sm mb-2">Published: {{blog.created_at}} | {{blog.author}}</p>
                            <p class="text-gray-300 text-sm line-clamp-2">{{blog.content}}</p>
                            <div class="mt-3 space-x-2 flex flex-col sm:flex-row space-y-2 sm:space-y-0">
                                <span class="bg-red-600 btn-secondary-tech px-3 py-1 rounded text-white text-sm delete_blog" blog_id="{{blog.id}}">Delete</span>
                                <span class="bg-blue-600 px-3 py-1 rounded text-white text-sm hover:bg-blue-700 transition-colors duration-200">View</span>
                            </div>
                        </div>
                        {% endfor %}
                    {% else %}
                        <h3>You posted no blog</h3>
                    {% endif %}
                </div>
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Create New Post</h2>
                <form class="space-y-4" id="createBlogPostForm" enctype="multipart/form-data">
                    <div>
                        <label for="post_title" class="block text-gray-300 text-sm font-bold mb-2">Post Title</label>
                        <input type="text" id="post_title" name="title" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., How to Maintain a Healthy Smile">
                    </div>
                    <div>
                        <label for="post_slug" class="block text-gray-300 text-sm font-bold mb-2">Post Slug</label>
                        <input type="text" id="post_slug" name="slug" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., how-to-maintain-healthy-smile">
                    </div>
                    <div>
                        <label for="post_content" class="block text-gray-300 text-sm font-bold mb-2">Content</label>
                        <textarea id="post_content" name="content" rows="6" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Write your blog post content here..."></textarea>
                    </div>
                    <div>
                        <label for="post_image_file" class="block text-gray-300 text-sm font-bold mb-2">Featured Image</label>
                        <label for="post_image_file" class="custom-file-upload">
                            📁 Choose file
                        </label>
                        <input type="file" id="post_image_file" name="image_url" class="hidden" onchange="updateLabel(this, 'post_image_file_label')">
                        <span id="post_image_file_label" class="text-gray-400 text-sm ml-2">No file chosen</span>
                    </div>
                    <button type="submit" class="btn-primary-tech text-white px-6 py-2 rounded-lg" id="publishBlogPostBtn">Publish Post</button>
                </form>
            </div>
        </section>

        <section id="settings" class="mb-8 pt-8 scroll-mt-24" style="display: none;">
            <h1 class="text-3xl md:text-4xl font-bold text-white mb-6">General Settings</h1>
            <div class="p-6 rounded-lg shadow-xl card-glass">
                <h2 class="text-xl md:text-2xl font-semibold text-white mb-4">Clinic Information</h2>
                <form class="space-y-4">
                    <div>
                        <label for="clinic_name" class="block text-gray-300 text-sm font-bold mb-2">Clinic Name</label>
                        <input type="text" id="clinic_name" name="clinic_name" value="{{clinic_info.clinic_name}}" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">
                    </div>
                    <div>
                        <label for="clinic_address" class="block text-gray-300 text-sm font-bold mb-2">Address</label>
                        <input type="text" id="clinic_address" name="clinic_address" value="{{clinic_info.address}}" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">
                    </div>
                    <div>
                        <label for="clinic_phone" class="block text-gray-300 text-sm font-bold mb-2">Phone</label>
                        <input type="tel" id="clinic_phone" name="clinic_phone" value="{{clinic_info.phone_number}}" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">
                    </div>
                    <div>
                        <label for="clinic_email" class="block text-gray-300 text-sm font-bold mb-2">Email</label>
                        <input type="email" id="clinic_email" name="clinic_email" value="{{clinic_info.email}}" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">
                    </div>
                    <div>
                        <label for="clinic_hours" class="block text-gray-300 text-sm font-bold mb-2">Operating Hours</label>
                        <textarea id="clinic_hours" name="clinic_hours" rows="3" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary">{{clinic_info.operating_hours}}</textarea>
                    </div>
                    <span id="save-clinic-info" class="btn-primary-tech text-white px-6 py-2 rounded-lg">Save Settings</span>
                </form>
            </div>
        </section>        
    </main>
    <div id="view-appointment-overlay" class="view-appointment-overlay">
        <div class="view-appointment-overlay-content card-glass p-8 rounded-xl max-w-lg w-full relative bg-secondary-blue">
            <span id="closeBookingConfirmationOverlay" class="absolute top-4 right-4 text-accent-red hover:text-white transition-colors duration-200 focus:outline-none cursor-pointer">❌</span>
            <div class="mb-8">
                <h3 class="text-3xl font-bold text-white mb-6">Appointment Details</h3>
                <div class="space-y-4 text-lg">
                    <p class="text-gray-300"><strong class="text-accent-red">Name:</strong> <span id="confirmName" class="text-white"></span></p>
                    <p class="text-gray-300"><strong class="text-accent-red">Email:</strong> <span id="confirmEmail" class="text-white"></span></p>
                    <p class="text-gray-300"><strong class="text-accent-red">Phone:</strong> <span id="confirmPhone" class="text-white"></span></p>
                    <p class="text-gray-300"><strong class="text-accent-red">Symptoms/Message:</strong> <span id="confirmSymptoms" class="text-white"></span></p>
                    <p class="text-gray-300"><strong class="text-accent-red">Bill:</strong> <span id="confirmBill" class="text-white"></span></p>
                    <p class="text-gray-300"><strong class="text-accent-red">Status:</strong> <span id="confirmStatus" class="text-white"></span></p>
                </div>
            </div>
        </div>
    </div> 
    <div class="view-appointment-overlay" id="appointment-validity-form">
        <div class="card-glass p-8 md:p-10 rounded-xl w-full max-w-md bg-secondary-blue">
            <span id="close-validity" class="absolute top-4 right-4 text-accent-red hover:text-white transition-colors duration-200 focus:outline-none cursor-pointer">❌</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Verify Your Appointment</h2>
            <p class="text-gray-400 text-center mb-8">Enter the code sent to your email address.</p>
            <form action="/verify" method="POST" class="space-y-6">
                <div class="mb-6">
                    <label for="verification_code" class="block text-gray-300 text-sm font-semibold mb-2">
                        Verification Code:
                    </label>
                    <input
                        type="text"
                        id="appointment-code"
                        name="code"
                        required
                        maxlength="6"
                        pattern="[0-9]{6}"
                        title="Please enter a 6-digit code"
                        class="input-tech text-center tracking-widest text-xl px-4 py-3 rounded-lg w-full"
                        placeholder="______"
                    >
                </div>
        
                <div class="mb-8">
                    <label for="user_email" class="block text-gray-300 text-sm font-semibold mb-2">
                        Email Address:
                    </label>
                    <input
                        type="email"
                        id="appointment-email"
                        name="appointment-email"
                        required
                        class="input-tech px-4 py-3 rounded-lg w-full"
                        placeholder="you@example.com"
                    >
                </div>
        
                <div class="flex items-center justify-center">
                    <span  class="btn-primary-tech w-full flex items-center justify-center py-3 px-6 rounded-lg verify">
                        <i class="fas fa-check-circle mr-2"></i> Verify
                    </span>
                </div>
        
                <div class="text-center mt-6">
                    <a href="#" class="text-accent-red hover:text-red-400 transition-colors text-sm">Resend Code?</a>
                </div>
            </form>
        </div>
    </div>   

    <div id="manageTestimonialsOverlay" class="manage-testimonials-overlay">
        <div class="service-price-content">
            <span id="closeManageTestimonialsOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-8 text-center">Manage All Testimonials</h2>

            <div id="testimonialAdminSummaryGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                {% if testimonials %}
                    {% for testimonial in testimonials %}
                    <div class="testimonial-admin-summary-box"
                         data-id="{{ testimonial.id }}"
                         data-author="{{ testimonial.author_name }}"
                         data-description="{{ testimonial.author_description }}"
                         data-quote="{{ testimonial.quote }}"
                         data-status="{{ testimonial.status }}">
                        <p class="text-gray-300 italic text-sm mb-2 line-clamp-2">"{{ testimonial.quote }}"</p>
                        <p class="text-white font-semibold text-md">- {{ testimonial.author_name }}</p>
                        <p class="text-gray-400 text-xs">Status: 
                            <span class="font-bold 
                                {% if testimonial.status == 'Approved' %}text-green-400
                                {% elif testimonial.status == 'Pending' %}text-yellow-400
                                {% else %}text-red-400{% endif %}">
                                {{ testimonial.status }}
                            </span>
                        </p>
                        <div class="mt-3 space-x-2 flex flex-col sm:flex-row space-y-2 sm:space-y-0 justify-center">
                            <span class="btn-primary-tech px-3 py-1 rounded text-white text-sm approve-testimonial-btn" data-id="{{ testimonial.id }}">
                                <i class="fas fa-check-circle mr-1"></i>Approve
                            </span>
                            <span class="btn-secondary-tech px-3 py-1 rounded text-white text-sm delete-testimonial-btn" data-id="{{ testimonial.id }}">
                                <i class="fas fa-trash-alt mr-1"></i>Delete
                            </span>
                            <span class="bg-gray-600 px-3 py-1 rounded text-white text-sm toggle-status-testimonial-btn" data-id="{{ testimonial.id }}">
                                <i class="fas fa-toggle-on mr-1"></i>Toggle Status
                            </span>
                        </div>
                    </div>
                    {% endfor %}
                {% else %}
                    <p class="text-gray-400 text-center col-span-full">No testimonials available to manage.</p>
                {% endif %}
            </div>

            <div id="fullAdminTestimonialDisplay" class="full-testimonial-display-admin">
                <span id="closeFullAdminTestimonial" class="close-button cursor-pointer">&times;</span>
                <h3 class="text-3xl font-bold text-white mb-6" id="fullAdminTestimonialAuthor"></h3>
                <p class="text-[#E00000] text-xl font-semibold mb-4" id="fullAdminTestimonialDescription"></p>
                <p class="text-gray-300 leading-relaxed text-lg italic mb-8" id="fullAdminTestimonialQuote"></p>
                <!-- Action buttons removed from here as per request -->
            </div>
        </div>
    </div>

    <!-- NEW: Team Member Update Overlay (CSS-only) -->
    <div id="updateTeamMemberOverlay" class="update-member-overlay">
        <div class="update-member-content card-glass p-8 rounded-xl relative">
            <a href="#" class="close-button cursor-pointer">&times;</a>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Update Team Member</h2>
            <form action="/update_team_member" method="POST" class="space-y-4">
                <input type="hidden" id="update_member_id" name="member_id">
                <div>
                    <label for="update_member_name" class="block text-gray-300 text-sm font-bold mb-2">Name</label>
                    <input type="text" id="update_member_name" name="full_name" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Dr. Alice Brown">
                </div>
                <div>
                    <label for="update_member_position" class="block text-gray-300 text-sm font-bold mb-2">Position</label>
                    <input type="text" id="update_member_position" name="position" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Orthodontist">
                </div>
                <div>
                    <label for="update_member_specialization" class="block text-gray-300 text-sm font-bold mb-2">Specialization</label>
                    <input type="text" id="update_member_specialization" name="specialization" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Orthodontics">
                </div>
                <div>
                    <label for="update_member_bio" class="block text-gray-300 text-sm font-bold mb-2">Bio/Description</label>
                    <textarea id="update_member_bio" name="bio" rows="3" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Short description of their expertise..."></textarea>
                </div>
                <div>
                    <label for="update_member_image" class="block text-gray-300 text-sm font-bold mb-2">Image URL</label>
                    <input type="text" id="update_member_image" name="image_url" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="https://via.placeholder.com/100">
                </div>
                <div>
                    <label for="update_member_email" class="block text-gray-300 text-sm font-bold mb-2">Email</label>
                    <input type="email" id="update_member_email" name="email" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., alice.brown@example.com">
                </div>
                <div>
                    <label for="update_member_phone" class="block text-gray-300 text-sm font-bold mb-2">Phone</label>
                    <input type="tel" id="update_member_phone" name="phone" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., +1234567890">
                </div>
                <span class="btn-primary-tech w-full text-white px-6 py-2 rounded-lg mt-4 update-member">Update Team Member</span>
            </form>
        </div>
    </div>

    <!-- NEW: Service Edit Overlay (CSS-only) -->
    <div id="editServiceOverlay" class="edit-service-overlay">
        <div class="edit-service-content card-glass p-8 rounded-xl relative">
            <a href="#" class="close-button cursor-pointer">&times;</a>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Edit Service</h2>
            <form action="/update_service" method="POST" class="space-y-4">
                <input type="hidden" id="edit_service_id" name="service_id">
                <div>
                    <label for="edit_service_name" class="block text-gray-300 text-sm font-bold mb-2">Service Name</label>
                    <input type="text" id="edit_service_name" name="name" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., Root Canal Therapy">
                </div>
                <div>
                    <label for="edit_service_price" class="block text-gray-300 text-sm font-bold mb-2">Price</label>
                    <input type="number" step="0.01" id="edit_service_price" name="price" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., 250.00">
                </div>
                <div>
                    <label for="edit_service_description" class="block text-gray-300 text-sm font-bold mb-2">Description</label>
                    <textarea id="edit_service_description" name="description" rows="3" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Describe the service"></textarea>
                </div>
                <div>
                    <label for="edit_service_icon" class="block text-gray-300 text-sm font-bold mb-2">Icon Class (e.g., fas fa-tooth)</label>
                    <input type="text" id="edit_service_icon" name="icon_class" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="e.g., fas fa-tooth">
                </div>
                <span class="btn-primary-tech w-full text-white px-6 py-2 rounded-lg mt-4 update-service">Update Service</span>
            </form>
        </div>
    </div>

    <!-- NEW: All Patients Overlay -->
    <div id="allPatientsOverlay" class="all-patients-overlay">
        <div class="all-patients-content card-glass p-8 rounded-xl max-w-2xl w-full relative bg-secondary-blue">
            <span id="closeAllPatientsOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">All Patients</h2>
            <div class="scrollable-content-patients mb-6">
                <table class="min-w-full bg-primary-blue/50 rounded-lg overflow-hidden border border-primary-blue">
                    <thead>
                        <tr class="text-left text-gray-300 bg-primary-blue/70">
                            <th class="py-3 px-4">Name</th>
                            <th class="py-3 px-4">Email</th>
                            <th class="py-3 px-4">Phone</th>
                            <th class="py-3 px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="patientsTableBody">
                        <!-- Patient data will be dynamically inserted here -->
                        <h3 class="text-red-400">No patient data is being served from the backend</h3>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- NEW: View Patient Details Overlay -->
    <div id="viewPatientDetailsOverlay" class="view-patient-details-overlay">
        <div class="view-patient-details-content card-glass p-8 rounded-xl max-w-lg w-full relative bg-secondary-blue">
            <span id="closeViewPatientDetailsOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Patient Details</h2>
            <div class="space-y-4 text-lg">
                <p class="text-gray-300"><strong class="text-accent-red">Name:</strong> <span id="patientDetailName" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Email:</strong> <span id="patientDetailEmail" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Phone:</strong> <span id="patientDetailPhone" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Date Joined:</strong> <span id="patientDetailDateJoined" class="text-white"></span></p>
            </div>
            <div class="mt-8 text-center">
                <a href="#updatePatientOverlay" class="btn-primary-tech px-6 py-2 rounded-lg" id="openUpdatePatientFormBtn">Update Patient Info</a>
            </div>
        </div>
    </div>

    <!-- NEW: Update Patient Overlay -->
    <div id="updatePatientOverlay" class="update-patient-overlay">
        <div class="update-patient-content card-glass p-8 rounded-xl relative">
            <a href="#" class="close-button cursor-pointer">&times;</a>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Update Patient Information</h2>
            <form action="/update_patient" method="POST" class="space-y-4">
                <input type="hidden" id="update_patient_id" name="patient_id">
                <div>
                    <label for="update_patient_name" class="block text-gray-300 text-sm font-bold mb-2">Name</label>
                    <input type="text" id="update_patient_name" name="full_name" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Patient Name">
                </div>
                <div>
                    <label for="update_patient_email" class="block text-gray-300 text-sm font-bold mb-2">Email</label>
                    <input type="email" id="update_patient_email" name="email" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="patient@example.com">
                </div>
                <div>
                    <label for="update_patient_phone" class="block text-gray-300 text-sm font-bold mb-2">Phone</label>
                    <input type="tel" id="update_patient_phone" name="phone" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Phone Number">
                </div>
                <!-- NEW: Password field added -->
                <div>
                    <label for="update_patient_password" class="block text-gray-300 text-sm font-bold mb-2">New Password (optional)</label>
                    <input type="password" id="update_patient_password" name="password" class="input-tech shadow appearance-none border rounded w-full py-2 px-3 leading-tight focus:outline-none focus:shadow-outline focus:ring-2 focus:ring-offset-2 focus:ring-offset-bg-dark-primary" placeholder="Enter new password if changing">
                </div>
                <span class="btn-primary-tech w-full text-white px-6 py-2 rounded-lg mt-4" id="updatePatientSubmitBtn">Update Patient</span>
            </form>
        </div>
    </div>

    <!-- NEW: All Visits Overlay -->
    <div id="allVisitsOverlay" class="all-visits-overlay">
        <div class="all-visits-content card-glass p-8 rounded-xl max-w-4xl w-full relative bg-secondary-blue">
            <span id="closeAllVisitsOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">All Website Visits</h2>
            <div class="scrollable-content-visits mb-6">
                <table class="min-w-full bg-primary-blue/50 rounded-lg overflow-hidden border border-primary-blue">
                    <thead>
                        <tr class="text-left text-gray-300 bg-primary-blue/70">
                            <th class="py-3 px-4">Visit ID</th>
                            <th class="py-3 px-4">Patient Name</th>
                            <th class="py-3 px-4">IP Address</th>
                            <th class="py-3 px-4">Page Visited</th>
                            <th class="py-3 px-4">Device/User Agent</th>
                            <th class="py-3 px-4">Timestamp</th>
                            <th class="py-3 px-4">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="visitsTableBody">
                        <!-- Visit data will be dynamically inserted here -->
                        <tr><td colspan="7" class="py-4 text-center text-gray-400">No visit data available.</td></tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- NEW: View Visit Details Overlay -->
    <div id="viewVisitDetailsOverlay" class="view-visit-details-overlay">
        <div class="view-visit-details-content card-glass p-8 rounded-xl max-w-lg w-full relative bg-secondary-blue">
            <span id="closeViewVisitDetailsOverlay" class="close-button cursor-pointer">&times;</span>
            <h2 class="text-3xl font-bold text-white mb-6 text-center">Visit Details</h2>
            <div class="space-y-4 text-lg">
                <p class="text-gray-300"><strong class="text-accent-red">Visit ID:</strong> <span id="visitDetailId" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Patient Name:</strong> <span id="visitDetailPatientName" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">IP Address:</strong> <span id="visitDetailIpAddress" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Page Visited:</strong> <span id="visitDetailPageVisited" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Device/User Agent:</strong> <span id="visitDetailUserAgent" class="text-white"></span></p>
                <p class="text-gray-300"><strong class="text-accent-red">Timestamp:</strong> <span id="visitDetailTimestamp" class="text-white"></span></p>
            </div>
        </div>
    </div>


    <script src="{{url_for('static', filename='assets/js/admin.js')}}"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
    <script>
        // Function to show a toast notification
        function showToast(message) {
            const toast = document.getElementById('toast-notification');
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000); // Hide after 3 seconds
        }

        // Function to update the label for file inputs
        function updateLabel(input, labelId) {
            const label = document.getElementById(labelId);
            if (input.files && input.files.length > 0) {
                label.textContent = input.files[0].name;
            } else {
                label.textContent = 'No file chosen';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const manageTestimonialsOverlay = document.getElementById('manageTestimonialsOverlay');
            const openManageTestimonialsOverlayBtn = document.getElementById('openManageTestimonialsOverlayBtn');
            const closeManageTestimonialsOverlay = document.getElementById('closeManageTestimonialsOverlay');
            const testimonialAdminSummaryGrid = document.getElementById('testimonialAdminSummaryGrid');

            const fullAdminTestimonialDisplay = document.getElementById('fullAdminTestimonialDisplay');
            const closeFullAdminTestimonialBtn = document.getElementById('closeFullAdminTestimonial');
            const fullAdminTestimonialAuthor = document.getElementById('fullAdminTestimonialAuthor');
            const fullAdminTestimonialDescription = document.getElementById('fullAdminTestimonialDescription');
            const fullAdminTestimonialQuote = document.getElementById('fullAdminTestimonialQuote');
            
            let currentTestimonialId = null; // To store the ID of the currently viewed testimonial

            // Function to show an overlay
            function showOverlay(overlayElement) {
                overlayElement.classList.add('visible');
            }

            // Function to hide an overlay
            function hideOverlay(overlayElement) {
                overlayElement.classList.remove('visible');
            }

            /* --- Admin Login Logic --- */
            const adminLoginOverlay = document.getElementById('adminLoginOverlay');
            const adminLoginForm = document.getElementById('adminLoginForm');
            const adminPasswordInput = document.getElementById('admin_password');
            const adminLoginMessage = document.getElementById('adminLoginMessage');
            const adminNameDisplay = document.getElementById('adminNameDisplay');
            const adminLoginTimeDisplay = document.getElementById('adminLoginTimeDisplay');
            const adminLogoutButton = document.getElementById('adminLogoutButton');
            const body = document.body;

            // Function to show a specific main content section and hide others
            function showSection(sectionId) {
                // Hide all main content sections
                document.querySelectorAll('main section[id]').forEach(section => {
                    section.style.display = 'none';
                });

                // Show the requested section
                const targetSection = document.getElementById(sectionId);
                if (targetSection) {
                    targetSection.style.display = 'block';
                    targetSection.scrollIntoView({ behavior: 'smooth' });
                }

                // Update active navigation link
                document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
                const activeLink = document.querySelector(`.nav-link[href="#${sectionId}"]`);
                if (activeLink) {
                    activeLink.classList.add('active');
                }
            }

            // Function to initialize authentication state
            function initializeAdminAuth() {
                const loggedInAdmin = sessionStorage.getItem('loggedInAdmin');
                if (loggedInAdmin) {
                    const adminData = JSON.parse(loggedInAdmin);
                    body.classList.remove('auth-required'); // Show main content
                    hideOverlay(adminLoginOverlay);
                    updateAdminDisplay(adminData.name, adminData.loginTime);
                    showSection('dashboard'); // Show dashboard by default after login
                } else {
                    body.classList.add('auth-required'); // Hide main content
                    showOverlay(adminLoginOverlay);
                }
            }

            // Function to update admin display in header
            function updateAdminDisplay(name, loginTime) {
                adminNameDisplay.textContent = name;
                adminLoginTimeDisplay.textContent = `Logged in: ${loginTime}`;
            }

            // Admin Login Form Submission
            if (adminLoginForm) {
                adminLoginForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const password = adminPasswordInput.value;

                    adminLoginMessage.textContent = 'Logging in...';
                    adminLoginMessage.style.color = 'gray';

                    try {
                        const response = await fetch(' https://hhxsq4xb-8000.uks1.devtunnels.ms/admin_login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ password: password }),
                        });

                        const data = await response.json();

                        if (response.ok && data[0].response === 'successful') {
                            const loginTime = new Date().toLocaleString(); // Get current time for display
                            const adminData = {
                                name: data[0].name,
                                loginTime: loginTime
                            };
                            sessionStorage.setItem('loggedInAdmin', JSON.stringify(adminData));
                            updateAdminDisplay(adminData.name, adminData.loginTime);
                            adminLoginMessage.textContent = 'Login successful!';
                            adminLoginMessage.style.color = 'green';
                            setTimeout(() => {
                                hideOverlay(adminLoginOverlay);
                                body.classList.remove('auth-required'); // Show main content
                                showSection('dashboard'); // Show dashboard after successful login
                            }, 500);
                        } else {
                            adminLoginMessage.textContent = data.message || 'Login failed. Invalid password.';
                            adminLoginMessage.style.color = 'red';
                        }
                    } catch (error) {
                        console.error('Admin login error:', error);
                        adminLoginMessage.textContent = 'An error occurred during login. Please try again.';
                        adminLoginMessage.style.color = 'red';
                    }
                });
            }

            // Admin Logout Button
            if (adminLogoutButton) {
                adminLogoutButton.addEventListener('click', () => {
                    sessionStorage.removeItem('loggedInAdmin'); // Clear admin data
                    location.reload(); // Reload page to show login screen
                });
            }

            // Initialize admin auth on page load
            initializeAdminAuth();
            /* --- End Admin Login Logic --- */

            /* --- Forgot Password Logic --- */
            const forgotPasswordLink = document.getElementById('forgotPasswordLink');
            const forgotPasswordOverlay = document.getElementById('forgotPasswordOverlay');
            const closeForgotPasswordOverlayBtn = document.getElementById('closeForgotPasswordOverlay');
            const forgotPasswordEmailInput = document.getElementById('forgot_password_email');
            const forgotPasswordPositionInput = document.getElementById('forgot_password_position');
            const generateTempPasswordBtn = document.getElementById('generateTempPasswordBtn');
            const forgotPasswordSuccessDisplay = document.getElementById('forgotPasswordSuccessDisplay');
            const forgotPasswordSuccessMessage = document.getElementById('forgotPasswordSuccessMessage');
            const forgotPasswordMessage = document.getElementById('forgotPasswordMessage');

            // Show forgot password overlay
            if (forgotPasswordLink) {
                forgotPasswordLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    hideOverlay(adminLoginOverlay);
                    showOverlay(forgotPasswordOverlay);
                    forgotPasswordMessage.textContent = '';
                    forgotPasswordSuccessMessage.textContent = '';
                    forgotPasswordSuccessDisplay.classList.add('hidden');
                    forgotPasswordEmailInput.value = '';
                    forgotPasswordPositionInput.value = '';
                });
            }

            // Close forgot password overlay
            if (closeForgotPasswordOverlayBtn) {
                closeForgotPasswordOverlayBtn.addEventListener('click', () => {
                    hideOverlay(forgotPasswordOverlay);
                    showOverlay(adminLoginOverlay);
                });
            }

            // Event listener for Generate New Password button
            if (generateTempPasswordBtn) {
                generateTempPasswordBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const email = forgotPasswordEmailInput.value;
                    const position = forgotPasswordPositionInput.value;

                    if (!email || !position) {
                        forgotPasswordMessage.textContent = 'Please enter both admin email and position.';
                        forgotPasswordMessage.style.color = 'red';
                        return;
                    }

                    forgotPasswordMessage.textContent = 'Generating and sending new password...';
                    forgotPasswordMessage.style.color = 'gray';
                    forgotPasswordSuccessMessage.textContent = '';
                    forgotPasswordSuccessDisplay.classList.add('hidden');

                    try {
                        const response = await fetch(' https://hhxsq4xb-8000.uks1.devtunnels.ms/change_admin_password', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email: email, position: position })
                        });
                        const data = await response.json();

                        if (response.ok && data.response === 'successful') {
                            forgotPasswordSuccessMessage.textContent = `Your new password has been sent to ${data.email_name}. Please check your email and log in.`;
                            forgotPasswordMessage.textContent = '';
                            forgotPasswordSuccessDisplay.classList.remove('hidden');

                            // After showing success, redirect back to login
                            setTimeout(() => {
                                hideOverlay(forgotPasswordOverlay);
                                showOverlay(adminLoginOverlay);
                                adminLoginMessage.textContent = 'Please check your email for the new password and log in.';
                                adminLoginMessage.style.color = 'green';
                            }, 3000); // Give user time to read the message
                        } else {
                            forgotPasswordMessage.textContent = data.message || 'Login failed. Invalid password.';
                            forgotPasswordMessage.style.color = 'red';
                            forgotPasswordSuccessDisplay.classList.add('hidden');
                        }
                    } catch (error) {
                        console.error('Error generating new password:', error);
                        forgotPasswordMessage.textContent = 'An error occurred. Please try again.';
                        forgotPasswordMessage.style.color = 'red';
                        forgotPasswordSuccessDisplay.classList.add('hidden');
                    }
                });
            }
            /* --- End Forgot Password Logic --- */


            // Event listener for "See All Testimonials" button
            if (openManageTestimonialsOverlayBtn) {
                openManageTestimonialsOverlayBtn.addEventListener('click', () => {
                    showOverlay(manageTestimonialsOverlay);
                    hideOverlay(fullAdminTestimonialDisplay);
                });
            }

            // Event listener for closing the "Manage All Testimonials" overlay
            if (closeManageTestimonialsOverlay) {
                closeManageTestimonialsOverlay.addEventListener('click', () => {
                    hideOverlay(manageTestimonialsOverlay);
                });
            }

            // Event listener for clicking on individual testimonial summary boxes or their buttons
            if (testimonialAdminSummaryGrid) {
                testimonialAdminSummaryGrid.addEventListener('click', (event) => {
                    const summaryBox = event.target.closest('.testimonial-admin-summary-box');
                    if (!summaryBox) return; // Clicked outside a summary box

                    const target = event.target;

                    // Check if an action button was clicked
                    if (target.classList.contains('approve-testimonial-btn')) {
                        event.stopPropagation(); // Prevent opening the full testimonial
                        const testimonialId = target.dataset.id;
                        console.log(`Approving testimonial with ID: ${testimonialId}`);
                        // Add your AJAX call or backend logic here to approve the testimonial
                        // After successful approval, you might want to update the status visually in the summary box
                        fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/approve_testimonial", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ id: testimonialId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log(data);
                            showToast(data[0].response);
                            // Update status text in UI if needed
                            const statusSpan = summaryBox.querySelector('.font-bold');
                            if (statusSpan) {
                                statusSpan.textContent = 'Approved';
                                statusSpan.classList.remove('text-yellow-400', 'text-red-400');
                                statusSpan.classList.add('text-green-400');
                            }
                        })
                        .catch(error => {
                            console.error("Fetch error:", error);
                            showToast("Error approving testimonial.");
                        });

                    } else if (target.classList.contains('delete-testimonial-btn')) {
                        event.stopPropagation(); // Prevent opening the full testimonial
                        const testimonialId = target.dataset.id;
                        console.log(`Deleting testimonial with ID: ${testimonialId}`);
                        
                        const payload = {
                            id: testimonialId
                        };
                    
                        fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/delete_testimonial", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(payload)
                        })
                        .then(response => {
                            if (!response.ok) { // Check for HTTP errors
                                throw new Error(`HTTP error! status: ${response.status}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            showToast(data[0].response);
                            summaryBox.remove(); // Remove the element from the UI
                        }) 
                        .catch(error => {
                            console.error("Fetch error:", error);
                            showToast("Error deleting testimonial.");
                        });
                    } else if (target.classList.contains('toggle-status-testimonial-btn')) {
                        event.stopPropagation(); // Prevent opening the full testimonial
                        const testimonialId = target.dataset.id;
                        console.log(`Toggling status for testimonial with ID: ${testimonialId}`);
                        
                        fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/toggle_testimonial_status", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ id: testimonialId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log(data);
                            showToast(data[0].response);
                            // Update status text in UI if needed
                            const statusSpan = summaryBox.querySelector('.font-bold');
                            if (statusSpan) {
                                const newStatus = data[0].new_status; // Assuming backend returns new status
                                statusSpan.textContent = newStatus;
                                statusSpan.classList.remove('text-green-400', 'text-yellow-400', 'text-red-400');
                                if (newStatus === 'Approved') {
                                    statusSpan.classList.add('text-green-400');
                                } else if (newStatus === 'Pending') {
                                    statusSpan.classList.add('text-yellow-400');
                                } else { // Assuming 'Rejected' or similar
                                    statusSpan.classList.add('text-red-400');
                                }
                            }
                        })
                        .catch(error => {
                            console.error("Fetch error:", error);
                            showToast("Error toggling testimonial status.");
                        });

                    } else {
                        // If no action button was clicked, open the full testimonial display
                        currentTestimonialId = summaryBox.dataset.id;
                        fullAdminTestimonialAuthor.textContent = summaryBox.dataset.author;
                        fullAdminTestimonialDescription.textContent = summaryBox.dataset.description;
                        fullAdminTestimonialQuote.textContent = summaryBox.dataset.quote;
                        showOverlay(fullAdminTestimonialDisplay);
                    }
                });
            }

            // Event listener for closing the full testimonial display
            if (closeFullAdminTestimonialBtn) {
                closeFullAdminTestimonialBtn.addEventListener('click', () => {
                    hideOverlay(fullAdminTestimonialDisplay);
                    currentTestimonialId = null; // Clear the current testimonial ID
                });
            }

            // Logic for the new team member update overlay (JS to populate form fields)
            const editMemberButtons = document.querySelectorAll('#member_edit');
            const memberFormOverlay = document.getElementById('updateTeamMemberOverlay');

            editMemberButtons.forEach(editButton => {
                editButton.addEventListener('click', (event) => {
                    const memberId = editButton.getAttribute('data-id');
                    const memberName = editButton.getAttribute('data-name');
                    const memberPosition = editButton.getAttribute('data-position');
                    const memberSpecialization = editButton.getAttribute('data-specialization');
                    const memberBio = editButton.getAttribute('data-bio');
                    const memberImage = editButton.getAttribute('data-image');
                    const memberEmail = editButton.getAttribute('data-email'); // New
                    const memberPhone = editButton.getAttribute('data-phone'); // New

                    document.getElementById('update_member_id').value = memberId;
                    document.getElementById('update_member_name').value = memberName;
                    document.getElementById('update_member_position').value = memberPosition;
                    document.getElementById('update_member_specialization').value = memberSpecialization;
                    document.getElementById('update_member_bio').value = memberBio;
                    document.getElementById('update_member_image').value = memberImage;
                    document.getElementById('update_member_email').value = memberEmail; // New
                    document.getElementById('update_member_phone').value = memberPhone; // New
                    // For CSS-only overlay, we just need to update the hash, which the <a> tag already does.
                    // If you were using JS to show/hide, you'd call showOverlay(memberFormOverlay) here.
                });
            });

            const updateMemberButton = document.querySelector('.update-member');
            if (updateMemberButton) {
                updateMemberButton.addEventListener('click', (event) => {
                    const payload = {
                        id: document.getElementById('update_member_id').value,
                        name: document.getElementById('update_member_name').value,
                        position: document.getElementById('update_member_position').value,
                        specialization: document.getElementById('update_member_specialization').value,
                        bio: document.getElementById('update_member_bio').value,
                        image_url: document.getElementById('update_member_image').value,
                        email: document.getElementById('update_member_email').value, // New
                        phone_number: document.getElementById('update_member_phone').value // New
                    };
                
                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/update_member", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(payload)
                    })
                    .then(response => {
                        if (!response.ok) { // Check for HTTP errors
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        showToast(data.response); // Assuming data.response for update
                        const memberInfos = document.querySelectorAll('.member-info');
                        memberInfos.forEach(memberInfo => {
                            if (memberInfo.getAttribute('member_id') === payload.id) {
                                memberInfo.querySelector('#member-name').textContent = payload['name'];
                                memberInfo.querySelector('#member-position').textContent = payload['position'] + '\n' + payload['specialization'];
                                memberInfo.querySelector('#member-bio').textContent = payload['bio'];
                                memberInfo.querySelector('#member-img').src = payload['image_url']; // Update image source
                                // Update data attributes on the edit button itself
                                const editBtn = memberInfo.querySelector('#member_edit');
                                if (editBtn) {
                                    editBtn.setAttribute('data-name', payload.name);
                                    editBtn.setAttribute('data-position', payload.position);
                                    editBtn.setAttribute('data-specialization', payload.specialization);
                                    editBtn.setAttribute('data-bio', payload.bio);
                                    editBtn.setAttribute('data-image', payload.image_url);
                                    editBtn.setAttribute('data-email', payload.email); // New
                                    editBtn.setAttribute('data-phone', payload.phone_number); // New
                                }
                            }
                        });
                        // Hide the overlay after successful update
                        window.location.hash = ''; // Clears the hash, hiding the CSS-only overlay
                    }) 
                    .catch(error => {
                        console.error("Fetch error:", error);
                        showToast("Error updating team member.");
                    });
                });
            }

            // Handle adding new team member with file upload
            const addTeamMemberForm = document.getElementById('addTeamMemberForm');
            const addNewMemberButton = document.getElementById('add-new-member');

            if (addNewMemberButton && addTeamMemberForm) {
                addNewMemberButton.addEventListener('click', async (event) => {
                    event.preventDefault(); // Prevent default button behavior

                    const formData = new FormData();
                    formData.append('name', document.getElementById('member_name').value);
                    formData.append('position', document.getElementById('member_position').value);
                    formData.append('specialization', document.getElementById('member_specialization').value);
                    formData.append('bio', document.getElementById('member_bio').value);
                    formData.append('email', document.getElementById('member_email').value);
                    formData.append('phone_number', document.getElementById('member_phone').value);

                    const imageFile = document.getElementById('member_image_file').files[0];
                    if (imageFile) {
                        formData.append('image_url', imageFile); // 'image_url' matches the backend key
                    } else {
                        showToast("Please select an image for the team member.");
                        return;
                    }

                    try {
                        const response = await fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/add_member", {
                            method: "POST",
                            body: formData // FormData automatically sets Content-Type to multipart/form-data
                        });

                        const data = await response.json();

                        if (response.ok && data[0].response === 'successful') {
                            showToast("Team member added successfully!");
                            addTeamMemberForm.reset(); // Clear the form
                            updateLabel(document.getElementById('member_image_file'), 'member_image_file_label'); // Reset file label
                            // Optionally, re-fetch and display team members
                            // You might need to reload the page or add dynamic rendering for new members
                            location.reload(); 
                        } else {
                            showToast(data[0].response || "Failed to add team member.");
                        }
                    } catch (error) {
                        console.error("Error adding team member:", error);
                        showToast("Error adding team member.");
                    }
                });
            }


            // Logic for Service Edit Overlay (JS to populate form fields)
            const editServiceButtons = document.querySelectorAll('.service-edit-btn');
            editServiceButtons.forEach(button => {
                button.addEventListener('click', (event) => {
                    const serviceId = event.target.dataset.id;
                    const serviceName = event.target.dataset.name;
                    const servicePrice = event.target.dataset.price;
                    const serviceDescription = event.target.dataset.description;
                    const serviceIcon = event.target.dataset.icon;

                    document.getElementById('edit_service_id').value = serviceId;
                    document.getElementById('edit_service_name').value = serviceName;
                    document.getElementById('edit_service_price').value = servicePrice;
                    document.getElementById('edit_service_description').value = serviceDescription;
                    document.getElementById('edit_service_icon').value = serviceIcon;
                });
            });

            const updateServiceButton = document.querySelector('.update-service');
            if (updateServiceButton) {
                updateServiceButton.addEventListener('click', (event) => {
                    const payload = {
                        id: document.getElementById('edit_service_id').value,
                        name: document.getElementById('edit_service_name').value,
                        price: document.getElementById('edit_service_price').value,
                        description: document.getElementById('edit_service_description').value,
                        fa_icon_class: document.getElementById('edit_service_icon').value
                    };
                
                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/update_service", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(payload)
                    })
                    .then(response => {
                        if (!response.ok) { // Check for HTTP errors
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        showToast(data[0].response); // Assuming data[0].response for update
                        const serviceInfos = document.querySelectorAll('.service-info');
                        serviceInfos.forEach(serviceInfo => {
                            if (serviceInfo.getAttribute('service-id') === payload.id) {
                                serviceInfo.querySelector('.service-icon i').className = `fas ${payload.fa_icon_class} text-accent-red`;
                                serviceInfo.querySelector('.service-name').textContent = payload.name;
                                serviceInfo.querySelector('.service-price').textContent = payload.price;
                                // Update data attributes on the edit button itself
                                const editBtn = serviceInfo.querySelector('.service-edit-btn');
                                if (editBtn) {
                                    editBtn.setAttribute('data-name', payload.name);
                                    editBtn.setAttribute('data-price', payload.price);
                                    editBtn.setAttribute('data-description', payload.description);
                                    editBtn.setAttribute('data-icon', payload.fa_icon_class);
                                }
                            }
                        });
                        // Hide the overlay after successful update
                        window.location.hash = ''; // Clears the hash, hiding the CSS-only overlay
                    }) 
                    .catch(error => {
                        console.error("Fetch error:", error);
                        showToast("Error updating service.");
                    });
                });
            }

            // NEW: Patient Management Overlays
            const totalPatientsCard = document.getElementById('totalPatientsCard');
            const allPatientsOverlay = document.getElementById('allPatientsOverlay');
            const closeAllPatientsOverlayBtn = document.getElementById('closeAllPatientsOverlay');
            const patientsTableBody = document.getElementById('patientsTableBody');

            const viewPatientDetailsOverlay = document.getElementById('viewPatientDetailsOverlay');
            const closeViewPatientDetailsOverlayBtn = document.getElementById('closeViewPatientDetailsOverlay');
            const patientDetailName = document.getElementById('patientDetailName');
            const patientDetailEmail = document.getElementById('patientDetailEmail');
            const patientDetailPhone = document.getElementById('patientDetailPhone');
            const patientDetailDateJoined = document.getElementById('patientDetailDateJoined');
            const openUpdatePatientFormBtn = document.getElementById('openUpdatePatientFormBtn');

            const updatePatientOverlay = document.getElementById('updatePatientOverlay');
            const updatePatientSubmitBtn = document.getElementById('updatePatientSubmitBtn');
            const updatePatientIdInput = document.getElementById('update_patient_id');
            const updatePatientNameInput = document.getElementById('update_patient_name');
            const updatePatientEmailInput = document.getElementById('update_patient_email');
            const updatePatientPhoneInput = document.getElementById('update_patient_phone');
            const updatePatientPasswordInput = document.getElementById('update_patient_password'); // New password input

            let currentPatientId = null; // To store the ID of the currently viewed patient

            // Event listener for "Total Patients" card click
            if (totalPatientsCard) {
                totalPatientsCard.addEventListener('click', () => {
                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/fetch_all_patients")
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(patients => {
                        patientsTableBody.innerHTML = ''; // Clear previous entries
                        if (patients && patients.length > 0) {
                            patients.forEach(patient => {
                                const row = document.createElement('tr');
                                row.classList.add('border-t', 'border-primary-blue/70', 'hover:bg-secondary-blue/50', 'transition-colors', 'cursor-pointer', 'patient-row');
                                row.setAttribute('data-patient-id', patient.id);
                                // Ensure data attributes are correctly populated from backend response
                                row.innerHTML = `
                                    <td class="py-3 px-4">${patient.full_name || 'N/A'}</td>
                                    <td class="py-3 px-4">${patient.email || 'N/A'}</td>
                                    <td class="py-3 px-4">${patient.phone || 'N/A'}</td>
                                    <td class="py-3 px-4">
                                        <span class="btn-primary-tech px-3 py-1 rounded text-white text-sm view-patient-btn"
                                            data-id="${patient.id}"
                                            data-name="${patient.full_name || ''}"
                                            data-email="${patient.email || ''}"
                                            data-phone="${patient.phone || ''}"
                                            data-registered-at="${patient.registered_at || ''}"
                                        >View</span>
                                    </td>
                                `;
                                patientsTableBody.appendChild(row);
                            });
                        } else {
                            patientsTableBody.innerHTML = `<tr><td colspan="4" class="py-4 text-center text-gray-400">No patients found.</td></tr>`;
                        }
                        showOverlay(allPatientsOverlay);
                    })
                    .catch(error => {
                        console.error("Error fetching patients:", error);
                        showToast("Error fetching patient data.");
                    });
                });
            }

            // Event listener for closing "All Patients" overlay
            if (closeAllPatientsOverlayBtn) {
                closeAllPatientsOverlayBtn.addEventListener('click', () => {
                    hideOverlay(allPatientsOverlay);
                });
            }

            // Event listener for clicking on individual patient rows in "All Patients" overlay
            if (patientsTableBody) {
                patientsTableBody.addEventListener('click', (event) => {
                    const target = event.target;
                    const patientRow = target.closest('.patient-row');
                    if (!patientRow) return;

                    const patientId = patientRow.getAttribute('data-patient-id');
                    currentPatientId = patientId; // Set current patient ID for update form

                    fetch(` https://hhxsq4xb-8000.uks1.devtunnels.ms/fetch_patient_details/${patientId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(patientsData => { // Expecting a list
                        const patient = patientsData && patientsData.length > 0 ? patientsData[0] : null; // Get the first item

                        if (patient) {
                            patientDetailName.textContent = patient.full_name || 'N/A';
                            patientDetailEmail.textContent = patient.email || 'N/A';
                            patientDetailPhone.textContent = patient.phone || 'N/A';
                            patientDetailDateJoined.textContent = patient.registered_at || 'N/A'; // Assuming 'registered_at' for date joined

                            // Populate update form fields
                            updatePatientIdInput.value = patient.id;
                            updatePatientNameInput.value = patient.full_name || ''; // Use full_name
                            updatePatientEmailInput.value = patient.email || '';
                            updatePatientPhoneInput.value = patient.phone || ''; // Use phone
                            updatePatientPasswordInput.value = ''; // NEVER pre-fill password for security

                            showOverlay(viewPatientDetailsOverlay);
                        } else {
                            showToast("Patient details not found.");
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching patient details:", error);
                        showToast("Error fetching patient details.");
                    });
                });
            }

            // Event listener for closing "View Patient Details" overlay
            if (closeViewPatientDetailsOverlayBtn) {
                closeViewPatientDetailsOverlayBtn.addEventListener('click', () => {
                    hideOverlay(viewPatientDetailsOverlay);
                    currentPatientId = null; // Clear current patient ID
                });
            }

            // Event listener for "Update Patient Info" button in details overlay
            if (openUpdatePatientFormBtn) {
                openUpdatePatientFormBtn.addEventListener('click', (event) => {
                    event.preventDefault(); // Prevent default anchor behavior
                    hideOverlay(viewPatientDetailsOverlay); // Hide details overlay
                    showOverlay(updatePatientOverlay); // Show update form overlay
                    // Form fields are already populated by the patient details fetch
                });
            }

            // Event listener for closing "Update Patient" overlay (using its own close button)
            const closeUpdatePatientOverlayBtn = updatePatientOverlay.querySelector('.close-button');
            if (closeUpdatePatientOverlayBtn) {
                closeUpdatePatientOverlayBtn.addEventListener('click', () => {
                    hideOverlay(updatePatientOverlay);
                });
            }


            // Event listener for "Update Patient" form submission
            if (updatePatientSubmitBtn) {
                updatePatientSubmitBtn.addEventListener('click', () => {
                    const payload = {
                        id: updatePatientIdInput.value,
                        full_name: updatePatientNameInput.value, // Use full_name
                        email: updatePatientEmailInput.value,
                        phone: updatePatientPhoneInput.value // Use phone
                    };
                    // Only add password to payload if it's not empty
                    if (updatePatientPasswordInput.value) {
                        payload.password = updatePatientPasswordInput.value;
                    }

                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/update_patient", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(payload)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        showToast(data[0].response); // Assuming data[0].response for success/error message
                        hideOverlay(updatePatientOverlay); // Hide the update form

                        if (data[0].response === 'Patient updated successfully') {
                            // Update the currently displayed patient details if the details overlay is still open
                            if (viewPatientDetailsOverlay.classList.contains('visible') && currentPatientId === payload.id) {
                                patientDetailName.textContent = payload.full_name; // Use full_name
                                patientDetailEmail.textContent = payload.email;
                                patientDetailPhone.textContent = payload.phone; // Use phone
                                // No registered_at update as it's not in the form
                            }
                            // Re-fetch all patients to update the list
                            totalPatientsCard.click(); // Simulate click to refresh the list
                        }

                    })
                    .catch(error => {
                        console.error("Error updating patient:", error);
                        showToast("Error updating patient information.");
                    });
                });
            }

            // Function to load and display bills
            function loadBills() {
                const targetTableBody = document.getElementById('billsTableBody'); // Always target the main bills table
                if (!targetTableBody) {
                    console.error("Bills table body not found.");
                    return;
                }

                fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/fetch_all_bills")
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(bills => {
                        targetTableBody.innerHTML = ''; // Clear previous entries
                        if (bills && bills.length > 0) {
                            bills.forEach(bill => {
                                const row = document.createElement('tr');
                                row.classList.add('border-t', 'border-primary-blue/70', 'hover:bg-secondary-blue/50', 'transition-colors');
                                row.innerHTML = `
                                    <td class="py-3 px-4">${bill.id || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.patient_id || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.booked_date || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.booked_time || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.expiry_date || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.appointment_code || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.message || 'N/A'}</td>
                                    <td class="py-3 px-4">$${(bill.bill || 0).toFixed(2)}</td>
                                    <td class="py-3 px-4"><span class="bg-blue-600 text-white text-xs px-2 py-1 rounded-full bill-status" data-bill-id="${bill.id}">${bill.status || 'N/A'}</span></td>
                                    <td class="py-3 px-4">${bill.created_at || 'N/A'}</td>
                                    <td class="py-3 px-4">${bill.updated_at || 'N/A'}</td>
                                `;
                                targetTableBody.appendChild(row);
                            });
                        } else {
                            targetTableBody.innerHTML = `<tr><td colspan="11" class="py-4 text-center text-gray-400">No bills found.</td></tr>`;
                        }
                    })
                    .catch(error => {
                        console.error("Error fetching bills:", error);
                        showToast("Error fetching bill data.");
                    });
            }

            // Handle navigation clicks for all sections
            document.querySelectorAll('.nav-link').forEach(link => {
                link.addEventListener('click', (event) => {
                    event.preventDefault();
                    const sectionId = link.getAttribute('href').substring(1); // Get section ID from href
                    showSection(sectionId);

                    // Special handling for bills section to load data
                    if (sectionId === 'bills') {
                        loadBills();
                    }
                });
            });

            // Event listener for the new sidebar "View All Bills" button
            const openBillsSectionSidebarBtn = document.getElementById('openBillsSectionSidebarBtn');
            if (openBillsSectionSidebarBtn) {
                openBillsSectionSidebarBtn.addEventListener('click', (event) => {
                    event.stopPropagation(); // Prevent the parent <a> from triggering its navigation
                    showSection('bills'); // Show the bills section
                    loadBills(); // Load bills into the main bills table
                });
            }

            // Logic for "All Bills" section triggered by "Revenue (Total)" card
            const revenueCard = document.getElementById('revenueCard');
            if (revenueCard) {
                revenueCard.addEventListener('click', () => {
                    showSection('bills'); // Show the bills section
                    loadBills(); // Load bills into the main bills table
                });
            }

            // Expiry form handling
            const expiryDaysInput = document.getElementById('expiry_days');
            const expiryHoursInput = document.getElementById('expiry_hours');
            const expiryMinutesInput = document.getElementById('expiry_minutes');
            const expirySecondsInput = document.getElementById('expiry_seconds');
            const setExpiryButton = document.getElementById('set-expiry');

            if (setExpiryButton) {
                setExpiryButton.addEventListener('click', () => {
                    // Get values, default to 0 if empty
                    const days = parseInt(expiryDaysInput.value) || 0;
                    const hours = parseInt(expiryHoursInput.value) || 0;
                    const minutes = parseInt(expiryMinutesInput.value) || 0;
                    const seconds = parseInt(expirySecondsInput.value) || 0;

                    const payload = {
                        days: days,
                        hours: hours,
                        minutes: minutes,
                        seconds: seconds
                    };

                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/set_appointment_expiry", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(payload)
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(data => {
                        showToast(data[0].response); // Assuming data[0].response for success message
                    })
                    .catch(error => {
                        console.error("Error setting expiry:", error);
                        showToast("Error setting expiry time.");
                    });
                });
            }

            // Appointment search handling
            const appointmentSearchInput = document.getElementById('appointment-search-input');
            const appointmentTableBody = document.querySelector('.appointment-body');

            if (appointmentSearchInput && appointmentTableBody) {
                appointmentSearchInput.addEventListener('input', (event) => {
                    const searchQuery = event.target.value.toLowerCase();

                    fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/search_appointment", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ input: searchQuery })
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(appointments => {
                        appointmentTableBody.innerHTML = ''; // Clear previous entries

                        if (appointments && appointments.length > 0) {
                            appointments.forEach(appointment => {
                                const row = document.createElement('tr');
                                row.classList.add('border-t', 'border-primary-blue/70', 'hover:bg-secondary-blue/50', 'transition-colors', 'appointment');
                                row.setAttribute('appointment-id', appointment.id);
                                row.innerHTML = `
                                    <td class="py-3 px-4 name">${appointment.full_name || 'N/A'}</td>
                                    <td class="py-3 px-4 date">${appointment.booked_date || 'N/A'}</td>
                                    <td class="py-3 px-4 time">${appointment.booked_time || 'N/A'}</td>
                                    <td class="py-3 px-4 notes">${appointment.notes || 'N/A'}</td>
                                    <td class="py-3 px-4"><span class="bg-yellow-600 text-white text-xs px-2 py-1 rounded-full">${appointment.status || 'N/A'}</span></td>
                                    <td class="py-3 px-4">${appointment.expires_at || 'N/A'}</td>
                                    <td class="py-3 px-4 flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                                        <span class="btn-primary-tech px-3 py-1 rounded text-white text-sm view-appointment">view</span>
                                    </td>
                                `;
                                appointmentTableBody.appendChild(row);
                            });
                        } else {
                            appointmentTableBody.innerHTML = `<tr><td colspan="7" class="py-4 text-center text-gray-400">No appointments found.</td></tr>`;
                        }
                    })
                    .catch(error => {
                        console.error("Error searching appointments:", error);
                        showToast("Error searching appointments.");
                        appointmentTableBody.innerHTML = `<tr><td colspan="7" class="py-4 text-center text-red-400">Error loading appointments.</td></tr>`;
                    });
                });
            }

            // NEW: Website Visits Overlay Logic
            const websiteVisitsCard = document.getElementById('websiteVisitsCard');
            const allVisitsOverlay = document.getElementById('allVisitsOverlay');
            const closeAllVisitsOverlayBtn = document.getElementById('closeAllVisitsOverlay');
            const visitsTableBody = document.getElementById('visitsTableBody');

            const viewVisitDetailsOverlay = document.getElementById('viewVisitDetailsOverlay');
            const closeViewVisitDetailsOverlayBtn = document.getElementById('closeViewVisitDetailsOverlay');
            const visitDetailId = document.getElementById('visitDetailId');
            const visitDetailPatientName = document.getElementById('visitDetailPatientName');
            const visitDetailIpAddress = document.getElementById('visitDetailIpAddress');
            const visitDetailPageVisited = document.getElementById('visitDetailPageVisited');
            const visitDetailUserAgent = document.getElementById('visitDetailUserAgent');
            const visitDetailTimestamp = document.getElementById('visitDetailTimestamp');

            const fetchAndDisplayVisits = async () => {
                visitsTableBody.innerHTML = `<tr><td colspan="7" class="py-4 text-center text-gray-400">Loading website visit data...</td></tr>`;

                try {
                    const response = await fetch(` https://hhxsq4xb-8000.uks1.devtunnels.ms/fetch_all_visits`);
                    if (!response.ok) throw new Error('Failed to fetch website visits');
                    const visitsData = await response.json(); // Expected: Array of objects

                    console.log("Fetched visits data:", visitsData); // ADDED FOR DEBUGGING

                    visitsTableBody.innerHTML = ''; // Clear loading message

                    if (visitsData && visitsData.length > 0) {
                        visitsData.forEach((visit) => {
                            const row = document.createElement('tr');
                            row.classList.add('border-t', 'border-primary-blue/70', 'hover:bg-secondary-blue/50', 'transition-colors', 'cursor-pointer', 'visit-row');
                            row.setAttribute('data-visit-id', visit.id);
                            // Store all data attributes for easy access in detail view
                            row.setAttribute('data-patient-name', visit.full_name || 'N/A');
                            row.setAttribute('data-ip-address', visit.ip_address || 'N/A');
                            row.setAttribute('data-path', visit.path || 'N/A'); // Add path
                            row.setAttribute('data-user-agent', visit.user_agent || 'N/A'); // Add user_agent
                            row.setAttribute('data-timestamp', visit.timestamp || 'N/A');

                            row.innerHTML = `
                                <td class="py-3 px-4">${visit.id || 'N/A'}</td>
                                <td class="py-3 px-4">${visit.full_name || 'N/A'}</td>
                                <td class="py-3 px-4">${visit.ip_address || 'N/A'}</td>
                                <td class="py-3 px-4">${visit.path || 'N/A'}</td>
                                <td class="py-3 px-4">${visit.user_agent || 'N/A'}</td>
                                <td class="py-3 px-4">${visit.timestamp || 'N/A'}</td>
                                <td class="py-3 px-4">
                                    <span class="btn-primary-tech px-3 py-1 rounded text-white text-sm view-visit-btn">View Details</span>
                                </td>
                            `;
                            visitsTableBody.appendChild(row);
                        });
                    } else {
                        visitsTableBody.innerHTML = `<tr><td colspan="7" class="py-4 text-center text-gray-400">No website visits found.</td></tr>`;
                    }
                } catch (error) {
                    console.error("Error fetching website visits:", error);
                    showToast("Error loading website visits.", true);
                    visitsTableBody.innerHTML = `<tr><td colspan="7" class="py-4 text-center text-red-400">Error loading visit data.</td></tr>`;
                }
            };

            // Event listener for "Website Visits" card click (Dashboard)
            if (websiteVisitsCard) {
                websiteVisitsCard.addEventListener('click', () => {
                    fetchAndDisplayVisits(); // Fetch and display visits
                    showOverlay(allVisitsOverlay); // Show the overlay
                });
            }

            // Event listener for closing "All Visits" overlay
            if (closeAllVisitsOverlayBtn) {
                closeAllVisitsOverlayBtn.addEventListener('click', () => {
                    hideOverlay(allVisitsOverlay);
                });
            }

            // Event listener for clicking on individual visit rows/buttons in "All Visits" overlay
            if (visitsTableBody) {
                visitsTableBody.addEventListener('click', (event) => {
                    const target = event.target;
                    const visitRow = target.closest('.visit-row');
                    if (!visitRow) return;

                    // Check if the "View Details" button was clicked
                    if (target.classList.contains('view-visit-btn')) {
                        // Populate the detail overlay using data attributes from the row
                        visitDetailId.textContent = visitRow.getAttribute('data-visit-id') || 'N/A';
                        visitDetailPatientName.textContent = visitRow.getAttribute('data-patient-name') || 'N/A';
                        visitDetailIpAddress.textContent = visitRow.getAttribute('data-ip-address') || 'N/A';
                        visitDetailPageVisited.textContent = visitRow.getAttribute('data-path') || 'N/A';
                        visitDetailUserAgent.textContent = visitRow.getAttribute('data-user-agent') || 'N/A';
                        visitDetailTimestamp.textContent = visitRow.getAttribute('data-timestamp') || 'N/A';
                        
                        showOverlay(viewVisitDetailsOverlay);
                    }
                });
            }

            // Event listener for closing "View Visit Details" overlay
            if (closeViewVisitDetailsOverlayBtn) {
                closeViewVisitDetailsOverlayBtn.addEventListener('click', () => {
                    hideOverlay(viewVisitDetailsOverlay);
                });
            }

            // NEW: Blog Post Submission
            const createBlogPostForm = document.getElementById('createBlogPostForm');
            const publishBlogPostBtn = document.getElementById('publishBlogPostBtn');

            if (publishBlogPostBtn && createBlogPostForm) {
                publishBlogPostBtn.addEventListener('click', async (event) => {
                    event.preventDefault(); // Prevent default button behavior

                    const formData = new FormData();
                    formData.append('title', document.getElementById('post_title').value);
                    formData.append('slug', document.getElementById('post_slug').value);
                    formData.append('content', document.getElementById('post_content').value);
                    
                    const imageFile = document.getElementById('post_image_file').files[0];
                    if (imageFile) {
                        formData.append('image_url', imageFile); // 'image_url' matches the backend key
                    } else {
                        showToast("Please select a featured image for the blog post.");
                        return;
                    }

                    try {
                        const response = await fetch(" https://hhxsq4xb-8000.uks1.devtunnels.ms/post_blog", {
                            method: "POST",
                            body: formData // FormData automatically sets Content-Type to multipart/form-data
                        });

                        const data = await response.json();

                        if (response.ok && data[0].response === 'successful') {
                            showToast("Blog post published successfully!");
                            createBlogPostForm.reset(); // Clear the form
                            updateLabel(document.getElementById('post_image_file'), 'post_image_file_label'); // Reset file label
                            // Optionally, re-fetch and display blog posts
                            // You might need to reload the page or add dynamic rendering for new posts
                            location.reload();
                        } else {
                            showToast(data[0].response || "Failed to publish blog post.");
                        }
                    } catch (error) {
                        console.error("Error publishing blog post:", error);
                        showToast("Error publishing blog post.");
                    }
                });
            }
        });

    </script>
</body>
</html>
